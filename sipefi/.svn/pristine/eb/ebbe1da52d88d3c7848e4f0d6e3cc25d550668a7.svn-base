/**
 * solPF es un modulo que hace el trabajo de una Clase, es decir, funciona como Clase.
 * Esta clase es la principal, es decir, funciona como un main, ya que es la primera que en 
 * interactuar entre el cliente y servidor, entonces aqui podremos encontrar las funciones principales
 * del sistema.
 * @module solPF
 */
const solPF = function(){
	
	/**
	 * Funcion que recibe los parametros iniciales del sistema, obtenidos del servidor.
	 * @param {Object} idsValidador Contiene la lista de IDS de los validadores.
	 * @param {Object} idsEstados Contiene una lista de identificadores de los estados (clave inegi).
	 * @param {Object} columnsTP Contiene la lista de columnas de las tablas de parametros.
	 * @return {void} 
	 * @method inicio
	 * @static
	 */
	const inicio = (idsValidador, idsEstados, columnsTP) => {
		fComun.guardaVarLocal("idsValidador",idsValidador);
		fComun.guardaVarLocal("idsEstados",idsEstados);
		fComun.guardaVarLocal("cTabPar",columnsTP);
		//variable necesaria iniciar en null para deuda vigente
		fComun.guardaVarLocal("objSoliPF",{accion: 0});
		let roles = JSON.parse(String($("#rol").html()).replace(new RegExp("'",'g'),"\""));
		let tamRol = roles.resp.length;
		fComun.initDefault();
		fComun.iniciaModalComentarios();
		fl.cargaTablasP1();
		cargaMenuIniBotones();
		(tamRol>1)?eligeRol(roles):iniciaComponentes(roles.resp[0].id);
	};

	/**
	 * Funcion que inicializa los componentes en el sistema de acuerdo al perfil y usuario logueado.
	 * @param {int} valor Contiene el perfil del usuario logueado.
	 * @return {void} 
	 * @method iniciaComponentes
	 * @static
	 */
	const iniciaComponentes = (valor) => {
		$("#rol").html(valor);
		//Habilitar cuando sea rol administrador
		if(valor == 11){
		  	$(".navCMIng").show();
		  	$(".navCalMasSol").show();
		  	$(".menuBotones").hide();
		  	$(".opcSeccIni").hide();
		  	$("#admConf").show();
		  	$(".navRelSICvsSist").hide();
		  	epf.eventosConfiguracion();
		}else{
			//Quitamos opcion de crear solicitudes nuevas al validador
			let idRV = fComun.getVarLocalJ("idsValidador");
			$("button[target|='aprobarSolicitud']").html("Solicitar aprobaci&oacute;n");
			if($.inArray(valor,idRV) != -1){
				$(".creaSolicitud").hide();
				$("#tablaSoliUsuario").parent().css("margin-top", "100px");
				$("button[target|='aprobarSolicitud']").html("Aprobar");
				$(".navRelSICvsSist").show();
			}
			fComun.consultaTipoCambio();
			cargaInfoTablasP1();
			epf.cargaEventosPrincipales();
		}
		fComun.validadorForm(".inputNumber");
		fComun.validadorForm(".inputPorcentaje");
	};
	
	/**
	 * Funcion que inicializa modal para elegir el rol a usar, cuando el usuario tiene muchos rol definidos.
	 * @param {Object} obj Contiene la lista de roles que tiene definidos el usuario logueado.
	 * @return {void} 
	 * @method eligeRol
	 * @static
	 */
	const eligeRol = (obj) => {
		let opcSelect = [{id: "0", text: "Elige tu perfil"}]; 
		let objOpc = obj.resp;
		for(i in objOpc){opcSelect.push({id: objOpc[i].id, text: objOpc[i].rol})} 
		$('#modalSelectRol').modal('show');
		epf.eventoRol(".cierraRol",'#modalSelectRol');
		fl.select2("#selectRol",opcSelect,1);
	};
	
	/**
	 * Funcion que inicializa el menu de botones, secciones para la pantalla principal.
	 * @return {void} 
	 * @method cargaMenuIniBotones
	 * @static
	 */
	const cargaMenuIniBotones = () => {
		$('.menuBotones').hide();
		$(".SIAR").show();
		$('.menuBotones[target="cargarSolicitud"]').show();
		$("#seccionBusqSoli").show();
	    $("#seccionCapturaSoli").hide();
	    $("#detalleCredito").hide();
	    $("#mostrarBusqueda").hide();
	    $('input[name=opcSolicitud]:checked').prop('checked',false);
	    $("input[name=opcSolicitud]:first").prop('checked',true);
	    //Se limpia primero secciÃ³n de comentarios
	    $("#seccionComentarios").html("");
	    $(".bCancelarSol").hide();
	};
	
	/**
	 * Funcion que inicializa el menu de botones, secciones para la pantalla de carga de la solicitud.
	 * @return {void} 
	 * @method cargaMenuLlenadoBotones
	 * @static
	 */
	const cargaMenuLlenadoBotones = () => {
		let accion = parseInt(fComun.getVarLocalS("accionSoli"));
		let rolUser = parseInt($("#rol").html());
		let idRV = fComun.getVarLocalJ("idsValidador");
		let canAffect = fComun.getVarLocalJ("canAffect");
		$('.menuBotones').hide();
		$(".SIAR").hide();
		$("#seccionCMCE").hide();
		$("#descargaPFdeE").hide();
		$(".navRelSICvsSist").hide();
		$('.menuBotones[target="regresarBusqSoli"]').show();
		//Mostras solo a riesgos el boton de descarga masiva de porcentajes a fideicomitir
		if(rolUser == 12 || rolUser == 13){
			$("#descargaPFdeE").show();
		}
		if(accion == 1){ //Modo visualizar
			$('.menuBotones[target="guardarSolicitud"]').hide();
			//Escondemos seccion de carga de creditos a evaluar masivo
			$("#seccionCMCE").hide();
		}else{ //Modo edicion/copia solicitud/nueva solicitud
			$('.menuBotones[target="guardarSolicitud"]').show();
			//Mostrar seccion de carga de creditos a evaluar masivo solo a riesgos
			if(rolUser == 12 || rolUser == 13)
				$("#seccionCMCE").show();
		}
		if($.inArray(rolUser,idRV) != -1 && canAffect){ //Solo si tiene perfil validador y la solicitud cumple requisitos podra rechazar solicitud
			$('.menuBotones[target="rechazarSolicitud"]').show();
			$('.menuBotones[target="#modalComentarios"]').show();
			//Solo poner boton de cancelar al validador del area
			let rolSol = parseInt(fComun.getVarLocalS("rolSol"));
			let compRol = rolUser-rolSol
			if(compRol == 1 || compRol == 0)
				$(".bCancelarSol").show();
		}else if(canAffect){
			$('.menuBotones[target="#modalComentarios"]').show();
		}
		$("#seccionBusqSoli").hide();
	    $("#seccionCapturaSoli").show();
	    $("#detalleCredito").hide();
	    fl.defaultTooltipster();
	};
	
	/**
	 * Funcion que inicializa el menu de botones, secciones para la pantalla de carga de la solicitud en el detalle del credito.
	 * @return {void} 
	 * @method cargaMenuDetalleOpc
	 * @static
	 */
	const cargaMenuDetalleOpc = () => {
		$('.menuBotones').hide();
		$('.menuBotones[target="cancelarRowAdd"]').html("Cancelar").show();
		$('.menuBotones[target="validarCampos"]').show();
		$('.menuBotones[target="#modalComentarios"]').show();
		$('.menuBotones[target="guardaRegistroCE"]').show();
	};
	
	/**
	 * Funcion que carga la informacion de las tres tablas principales en la pantalla inicial del sistema,
	 * en donde se muestran las solicitudes procesadas por los usuarios.
	 * @return {void} 
	 * @method cargaInfoTablasP1
	 * @static
	 */
    const cargaInfoTablasP1 = () => {
    	let param = {
    			user: $("#usuario").html(),
    			rol: $("#rol").html(),
    			universo: $("#universo").html()
    	}
    	fComun.post("/llenaTablasSoli/",param, function(resp){
			try{
				let obj = resp;
				fComun.guardaVarLocal("catalogos",obj.catalogos)
				$(".tituloTablas").removeClass("esconder");
				/*Primero validamos informacion de solicitudes
				 * realizadas por el usuario logueado*/
				if(obj.estatusTSU == 200){
					fComun.refrescaTabla("#tablaSoliUsuario",obj.TSU);
				}
				/*Solicitudes donde participo el usuario logueado
				 * y que ha mandado a siguienes estatus*/
				if(obj.estatusTSA == 200){
					fComun.refrescaTabla("#tablaSoliAvanzadas",obj.TSA);
				}
				/*De igual manera validamos y obtenemos las solicitudes que
				 * han sido realizadas en el rango de hoy - 30 dias*/
				if(obj.estatusTSR == 200){
					fComun.refrescaTabla("#tablaSoliRecientes",obj.TSR);
				}
				solPF.cargaEstilosTablas();
			}catch(e){console.log(e)}
		});
    };
    
    /**
	 * Funcion que ayuda a buscar informacion de solicitudes que han sido trabajadas previamente.
	 * @param {Object} param Parametro que contiene el objeto con la info necesaria para consultar informacion de la solicitud.
	 * @return {void} 
	 * @method buscaSolicitud
	 * @static
	 */
	const buscaSolicitud = (param) => {
		fComun.post("/buscaSolicitud/",param, function(resp){
			try{
				let obj = resp;
				if(obj.estatus == 200){
					let estatusSoli = obj.respS[0][5].split("#@@#")[1];
					(estatusSoli == '4')?$("#copiarSolicitud").show():$("#copiarSolicitud").hide();
					fComun.refrescaTabla("#tablaBusqSoli",obj.respS);
				}
			}catch(e){console.log(e)}
			$('#modalBusqSolicitud').modal('show');
			$('#modalBusqSolicitud .modal-dialog').addClass("ajustaModalBS");
		});
	};
	
	/**
	 * Funcion que ayuda a modificar los estilos de las tablas que estan siendo trabajadas en el sistema.
	 * @return {void} 
	 * @method cargaEstilosTablas
	 * @static
	 */
	const cargaEstilosTablas = () => {
		let idRV = fComun.getVarLocalJ("idsValidador");
		let rol = parseInt($("#rol").html());
		$("#tablaSoliUsuario_wrapper .tituloTablas").html(
				($.inArray(rol,idRV) != -1)?'<strong>Validaciones pendientes</strong>':
											'<strong>Solicitudes pendientes de '+$("#usuario").html()+'</strong>');
		$("#tablaSoliAvanzadas_wrapper .tituloTablas").html('<strong>Solicitudes donde '+$("#usuario").html()+' particip&oacute;</strong>');
		$("#tablaSoliRecientes_wrapper .tituloTablas").html('<strong>Solicitudes recientes</strong>');
		$("#tablaSoliUsuario th").addClass("centrar");
		$("#tablaSoliAvanzadas th").addClass("centrar");
		$("#tablaSoliRecientes th").addClass("centrar");
		$("#tablaBusqSoli th").addClass("centrar");
		$("#tablaEE th").addClass("centrar");
		$("#tablaSoliUsuario").parent().addClass("espacioTablas");
		$("#tablaSoliAvanzadas").parent().addClass("espacioTablas");
		$("#tablaSoliRecientes").parent().addClass("espacioTablas");
		$(".dataTables_length").addClass("espacioRegMostrar");
	};
	
    /**
	 * Funcion encargada de realizar las acciones para la solicitud (1- Visualizar solicitud, 2- Editar solicitud, 3- copiar solicitud).
	 * @param {String} infoSelect Contiene la informacion general de la solicitud elegida para realizar una accion.
	 * @param {int} opc Parametro que define la accion a realizar con la solicitud.
	 * @return {void} 
	 * @method realizaAccionSolicitud
	 * @static
	 */
	const realizaAccionSolicitud = (infoSelect, opc) => {
    	let accion = "";
    	let infoUtil = "";
    	let canAffect = false;
    	if(opc == 3 ){ //Copia de Solicitud 3
    		accion = opc;
        	infoUtil = infoSelect;
        	canAffect = true;
    	}else{ //Edicion o visualizar solicitud 1, 2
    		accion = String(infoSelect).split("__")[0];
        	infoUtil = String(infoSelect).split("__")[1];
        	let eSoli = parseInt(String(infoUtil).split("#@@#")[1]); 
        	canAffect = $.isNumeric(String(infoSelect).split("__")[2]);
        	canAffect = canAffect * ((eSoli == 4)?false:true);
        	canAffect = canAffect==1?true:false;
    	}
    	fComun.guardaVarLocal("canAffect",canAffect);
    	fComun.guardaVarLocalS("accionSoli",accion);
    	let param = {
    			action: accion,
    			info: infoUtil,
    			rol: $("#rol").html()
    	}
		fcs.cargaCatalogos(2,param);
    };
	
    /**
	 * Funcion encargada obtener y de pintar o cargar la informacion de la solicitud elegida.
	 * @param {Object} param Parametro que contiene el objeto con la info necesaria para consultar informacion de la solicitud.
	 * @return {void} 
	 * @method pintaSolicitud
	 * @static
	 */
    const pintaSolicitud = (param) => {
    	fComun.mostrarEspera();
    	fComun.post("/cargaSolicitudRF/",param, function(resp){
			try{
				let obj = resp;
				if(obj.estatus == 200){ //Tenemos informaciÃ³n que mostrar
					fcs.cargaSolicitudAccion(obj);
				}else{
					$("#modalCargaSoli .modal-title").html("Mensaje de error");
					$("#modalCargaSoli .modal-header").addClass("headerModalError");
					$("#modalCargaSoli .textoBody").html("" +
							"No fue posible realizar la carga de la solicitud <br>" +
							"<strong>Avisa al &aacute;rea de sistemas de la DGAAR</strong>" +
							"");
					$("#modalCargaSoli .modal-body button").attr('class','btn btn-danger');
					$('#modalCargaSoli').modal('show');
				}
			}catch(e){console.log(e)}
		});
    };
	
	return{
		inicio : inicio,
		buscaSolicitud:	buscaSolicitud,
		cargaEstilosTablas:	cargaEstilosTablas,
		cargaMenuIniBotones:	cargaMenuIniBotones,
		cargaMenuLlenadoBotones:	cargaMenuLlenadoBotones,
		cargaMenuDetalleOpc:	cargaMenuDetalleOpc,
		realizaAccionSolicitud:	realizaAccionSolicitud,
		iniciaComponentes:	iniciaComponentes,
		pintaSolicitud:	pintaSolicitud
	}
}();