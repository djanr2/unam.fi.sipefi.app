/**
 * epf es un modulo que hace el trabajo de una Clase, es decir, funciona como Clase.
 * Esta clase nos apoya con los eventos que se estaran usando en el front del sistema de recursos a fideicomitir.
 * @module epf
 */

const epf = function(){
	
	/**
	 * 
	 * Funcion que inicializa los eventos principales a usar en el sistema CEF.
	 * @return {void} 
	 * @method cargaEventosPrincipales
	 * @static
	 */
	const cargaEventosPrincipales = () => {
		
		//Cargamos eventos necesarios para la sesion
		comunE.cargaEventoSesion();
		
		/**
		 * Evento para elegir modo de crear solicitud.
		 * @event module:epf~#id_opcSolicitud
		 * @type {object}
		 * @listens change
		 */
		$("#id_opcSolicitud").unbind("change");
		$("#id_opcSolicitud").on("change",function(){
			let opcSol = $('input[name=opcSolicitud]:checked').val();
			if(opcSol == 2){ //Crea solicitud a partir de una existente
				$("#mostrarBusqueda").show();
				$('.menuBotones[target="cargarSolicitud"]').hide();
			}else{ //Crea solicitud nueva
				$("#mostrarBusqueda").hide();
				$('.menuBotones[target="cargarSolicitud"]').show();
			}
		});
		
		/**
		 * Evento para buscar alguna solicitud por num Soli digitado.
		 * @event module:epf~#buscaSolicitud
		 * @type {object}
		 * @listens click
		 */
		$("#buscaSolicitud").unbind("click");
		$("#buscaSolicitud").on("click", function(){
			let numSolicitud = $("#mostrarBusqueda input").val();
			let param = {
					numSoli : numSolicitud,
					universo: $("#universo").html()
			}
			fComun.refrescaTabla("#tablaBusqSoli",[]);
			solPF.buscaSolicitud(param);
		});
		
		/**
		 * Acciones de los botones de barra superior.
		 * @event module:epf~.menuBotones
		 * @type {object}
		 * @listens click
		 */
		$(".menuBotones").unbind("click");
		$(".menuBotones").on("click",function(){
			let accion = $(this).attr("target");
			switch(accion) {
			  case 'regresarBusqSoli':
				  	fComun.recargaPagina();
				    break;
			  case 'regresarLlenaSoli':
				  	solPF.cargaMenuLlenadoBotones();
				  	break;
			  case 'cargarSolicitud':
				  	fComun.guardaVarLocalS("accionSoli",0);
				  	fComun.guardaVarLocal("canAffect",true);
				  	fcs.cargaCatalogos(1,{rol: $("#rol").html()});
				    break;
			  case 'guardarSolicitud':
				  	$("#usuarioSol").html($("#usuario").html());
				  	fcs.accionSolicitud(1);
				    break;
			  case 'aprobarSolicitud':
				  	fcs.validaSoliRiesgos(1);
				    break;
			  case 'validarRiesgo':
				  	fcs.validaSoliRiesgos(2);
				    break;
			  case 'rechazarSolicitud':
				  	fcs.modalRechazoSoli();
				    break;
			  case '#modalComentarios':
				  	$(accion).modal('show');
				    break;
			  case 'cancelarRowAdd':
				  	$("#detalleCredito").hide();
				  	$("#seccionCapturaSoli").show();
				  	let aSoli = Number(fComun.getVarLocalS("accionSoli"));
				  	solPF.cargaMenuLlenadoBotones();
				  	let opcion = (aSoli > 0 && aSoli < 3)?1:2;
				  	fcs.validarBotonesCambioEstatus(opcion);
				  	/*Si solo puede visualizar sin proceder a validar
					se esconden todos los botones menos el de regresar
					*/
					if(!fComun.getVarLocalJ("canAffect")){
						$('.menuBotones').hide();
						$('.menuBotones[target="regresarBusqSoli"]').show();
					}
				  break;
			  case 'validarCampos': //Se validan los campos obligatorios
				  	fcs.validaCamposObliCredEval(1);
				  break;
			  case 'guardaRegistroCE':
				  	fcs.guardaRegistroCE(1);
				  break;
			}
		});
		
		/**
		 * Evento para copiar solicitud a partir de una existente.
		 * @event module:epf~#copiarSolicitud
		 * @type {object}
		 * @listens click
		 */
		$("#copiarSolicitud").unbind("click");
		$("#copiarSolicitud").on("click",function(){
			let infoUtil = $("#tablaBusqSoli").DataTable().rows(0).data()[0][5];
			$('#modalBusqSolicitud').modal('hide');
			fComun.guardaVarLocalS("accionSoli",3);
			solPF.realizaAccionSolicitud(infoUtil,3);
		});
		
		/**
		 * Evento para buscar num catalogo por RFC del acreditado y validar ingresos.
		 * @event module:epf~#selectAcreditado
		 * @type {object}
		 * @listens change
		 */
		$("#selectAcreditado").unbind("change");
		$("#selectAcreditado").on("change",function(event){
			let valor = String($(this).val());
			let catalogo = valor.split("#@@#")[1];
			$("#idCatalogo").val(catalogo);
			//Validamos si puede o no ingresar a la seccion de ingresos
			$("#s-ingresos-tab").prop("disabled",((valor == "0#@@#CXXXXXX")?true:false));
			//Validamos si puede o no ingresar a la seccion de creditos a evaluar
			$("#s-credE-tab").prop("disabled",((valor == "0#@@#CXXXXXX")?true:false));
			//Validamos msj de ingresos
			fcs.validaMsjIngreAcred();
		});
		
		/**
		 * Evento que valida el tipo de solicitud.
		 * @event module:epf~#tipoSolicitud
		 * @type {object}
		 * @listens change
		 */
		$("#tipoSolicitud").unbind("change");
		$("#tipoSolicitud").on("change",function(){
			$("#oportSIBA").prop('disabled', ($(this).val() == 1)?false:true);
			$("#activSIBA").prop('disabled', ($(this).val() == 1)?false:true);
		});
		
		/**
		 * Evento que valida el tipo de registro agregado a la tabla.
		 * @event module:epf~.addRowTable
		 * @type {object}
		 * @listens click
		 */
		$(".addRowTable").unbind("click");
		$(".addRowTable").on("click",function(){
			let tipoReg = $(this).attr("id");
			switch(tipoReg) {
				  case 'addE': //Agregamos registro a tabla de escenarios
					  	fcs.creaEscenario();
					  	actualizaTablaEscenarios();
					    break;
				  case 'addCV': //Agregamos registro a tabla de creditos vigentes
					    break;
				  case 'addCE': //Agregamos registro a tabla de creditos a evaluar
					  	$("#seccionCapturaSoli").hide();
					  	$("#detalleCredito").show();
					  	$("#addRIC").show();
					  	solPF.cargaMenuDetalleOpc();
					  	fcs.cargaInfoInicialCred(-1);
					    break;
				  case 'addRIC': //Agregamos registro para relacion tipo ingreso - credito
					  	let elemTbody = $(this).parents().eq(2).next();
					  	fcs.creaRelIngCred(elemTbody);
					  	break;
			}
		});
		
		/**
		 * Evento que valida la seccion de fondo de reserva.
		 * @event module:epf~#checkFR
		 * @type {object}
		 * @listens change
		 */
		$("#checkFR").unbind("change");
		$("#checkFR").on("change",function(){
			let isChecked = $(this).prop("checked");
			(isChecked)?$(".seccFR").show():$(".seccFR").hide();
		});
		
		/**
		 * Evento que valida la seccion de cobertura de tasa.
		 * @event module:epf~#checkCob
		 * @type {object}
		 * @listens change
		 */
		$("#checkCob").unbind("change");
		$("#checkCob").on("change",function(){
			let isChecked = $(this).prop("checked");
			(isChecked)?$(".seccCobTasa").show():$(".seccCobTasa").hide();
		});
		
		/**
		 * Evento que valida el tipo de producto elegido.
		 * @event module:epf~.tipoProducto
		 * @type {object}
		 * @listens change
		 */
		$(".tipoProducto").unbind("change");
		$(".tipoProducto").on("change",function(){
			fcs.actualizaEsquemas($(this).val());
		});
		
		/**
		 * Evento que valida el tipo de esquema de amortizacion elegido.
		 * @event module:epf~.esqAmort
		 * @type {object}
		 * @listens change
		 */
		$(".esqAmort").unbind("change");
		$(".esqAmort").on("change",function(){
			let idEsqA = parseInt($(this).val());
			fcs.actualizaTipoTasa(idEsqA);
			let bloqCargaExcel = (idEsqA == 6)?false:true; //Esquema Amort especifico = 6
			$(".ceeae").prop("disabled",bloqCargaExcel);
			//se habilitan opciones para esquema especifico
			(!bloqCargaExcel)?$(".opsEE").show():$(".opsEE").hide();
			//se habilitan opciones para esquemas que sean diferente a esq especifico
			(bloqCargaExcel)?$(".opsNoEE").show():$(".opsNoEE").hide();
			//Habilitamos tasa se crecimiento o tasa nivelada
			$(".opsEATasas").hide();
			if(idEsqA == 2){//EA creciente
				$(".opEATC").show();
			}else if(idEsqA == 5){ //EA nivelado
				$(".opEATN").show();
			}
		});
		
		/**
		 * Evento que esconde o habilita campos por tipo tasa.
		 * @event module:epf~.tipoTasa
		 * @type {object}
		 * @listens change
		 */
		$(".tipoTasa").unbind("change");
		$(".tipoTasa").on("change", function(){
			let tipoTasa = String($(this).val());
			$("#checkCob").prop("disabled",false);
			switch(tipoTasa) {
			  case '0': //Sin seleccion
				  	$(".opsTT").hide();
				    break;
			  case '1': //Variable
				  	$(".opsTT").hide();
				  	$(".opTR").show();
				  	//Seleccionar por default opcion 1 y bloquear
				  	$(".tasaRef").val("1").prop("disabled",true).trigger("change");
				    break;
			  case '2': //Fija
				  	$(".opsTT").hide();
				  	$(".opTF").show();
				  	//Deshabilitamos sección de cobertura y bloqueamos
				  	$("#checkCob").prop("checked",false).prop("disabled",true).trigger("change");
				    break;
			}
			//Deshabilitamos sección de cobertura y bloqueamos cuando rol es diferente a riesgos
			let rol = Number($("#rol").html());
			if(rol < 12 || rol > 13){
			  	$("#checkCob").prop("checked",false).prop("disabled",true).trigger("change");
			}
		});
		
		/**
		 * Evento limita plazos por periodicidad.
		 * @event module:epf~.periodicidad
		 * @type {object}
		 * @listens change
		 */
		$(".periodicidad").unbind("change");
		$(".periodicidad").on("change", function(){
			let valor = String($(this).val()).split("#@@#");
			fcs.setLimitesPlazos(valor[0],valor[1],1);
			fcs.setLimitesPlazos(valor[0],valor[1],2); //Esta linea eliminar cuando se cree evento comentado de .periodicidadCobT
			$(".periodicidadCobT").val($(this).val()).trigger("change");
		});
		
		///***.::| Evento limita plazos por periodicidad de cobertura tasa |::.***/
		//$(".periodicidadCobT").unbind("change");
		//$(".periodicidadCobT").on("change", function(){
		//	let valor = String($(this).val()).split("#@@#");
		//	fcs.setLimitesPlazos(valor[0],valor[1],2);
		//});
		
		/**
		 * Evento que habilita o no el input para destino especifico.
		 * @event module:epf~.tipoDestino
		 * @type {object}
		 * @listens change
		 */
		$(".tipoDestino").unbind("change");
		$(".tipoDestino").on("change", function(){
			let valor = parseInt($(this).val());
			if(valor == 25){
				$(".optDest").show();
			}else{
				$(".optDest").hide();
			}
		});
		
		/**
		 * Evento que ayuda a modificar el nombre corto.
		 * @event module:epf~.acreedor
		 * @type {object}
		 * @listens change
		 */
		$(".acreedor").unbind("change");
		$(".acreedor").on("change", function(){
			$(this).prop("disabled",true);
			fcs.actualizaNombreCorto();
		});
		
		/**
		 * Evento que ayuda a modificar el nombre corto.
		 * @event module:epf~.montoCred
		 * @type {object}
		 * @listens focusout
		 */
		$(".montoCred").unbind("focusout");
		$(".montoCred").on("focusout", function(){
			fcs.actualizaNombreCorto();
		});
		
		/**
		 * Evento para obtener informacion de excel elegido.
		 * @event module:epf~#cargaExcelEAE
		 * @type {object}
		 * @listens change
		 */
		$("#cargaExcelEAE").unbind("change");
		$('#cargaExcelEAE').on('change',function(){
			let tam = $(this).val().length;
			if(tam > 0){
				let fileName = $(this)[0].files[0].name;
	            $(this).next('.custom-file-label').html(fileName);
	            let fd = new FormData(); 
	            let files = $(this)[0].files[0]; 
	            fd.append('file', files); 
	            fcs.cargaDatosExcel(fd,0);
	            $(this).val("");
			}
        });
		
		/**
		 * Evento que muestra el detalle del esquema especifico cargado.
		 * @event module:epf~.viewDataEE
		 * @type {object}
		 * @listens click
		 */
		$(".viewDataEE").unbind("click");
		$(".viewDataEE").on("click",function(){
			let valor = $(".excelEE").val();
			(valor != 0 && $(".excelEE").val() != null)?fcs.showTableEE(valor):"";
		});
		
		/**
		 * Evento para ajustar css de select2.
		 * @event module:epf~.custom-select
		 * @type {object}
		 * @listens select2:select
		 */
		$(".custom-select").unbind("select2:select");
		$(".custom-select").on("select2:select",function(){
			fcs.cssVistaCaptura();
		});
		
		/**
		 * Evento que valida elementos a mostrar por tipo de fondo de reserva.
		 * @event module:epf~.tipoFondReserv
		 * @type {object}
		 * @listens change
		 */
		$(".tipoFondReserv").unbind("change");
		$(".tipoFondReserv").on("change", function(){
			let valor = parseInt($(this).val());
			$(".opsTFR").hide();
			if(valor == 1){ //Periodos SD
				$(".opcTFRSD").show();
			}else if(valor == 2){ //Fijo
				$(".opcTFRF").show();
			}
		});
		
		/**
		 * Evento que valida elementos a mostrar por tipo de cobertura de tasa.
		 * @event module:epf~.tipoCobTasa
		 * @type {object}
		 * @listens change
		 */
		$(".tipoCobTasa").unbind("change");
		$(".tipoCobTasa").on("change", function(){
			let valor = parseInt($(this).val());
			$(".opsCobT").hide();
			if(valor == 1){ //SWAP
				$(".opcCobSWAP").show();
			}else if(valor == 2){ //CAP
				$(".opcCobCAP").show();
			}
		});
		
		/**
		 * Evento para elegir el tipo de carga de ingresos.
		 * @event module:epf~.cargaIngRadio
		 * @type {object}
		 * @listens change
		 */
		$(".cargaIngRadio").unbind("change");
		$(".cargaIngRadio").on("change",function(){
			let opcSol = parseInt($('input[name="cargaIngRadio"]:checked').val());
			if(opcSol == 1){ //Carga informacion de ingresos por excel
				$("#divCargaExcelIng").show();
				$("#divCargaIngBD").hide();
				$(".yearIniIng").hide();
			}else{ //Carga ingresos con base de datos.
				$("#divCargaExcelIng").hide();
				$("#divCargaIngBD").show();
				$(".yearIniIng").show();
				let idElemABusq = "#anioIniIng";
				$(idElemABusq).val("");
				//Quitamos tooltip previo si existe
				$(idElemABusq).hasClass("tooltipstered") ? fComun.destruyeTooltip(idElemABusq):"";
			}
		});
		
		/**
		 * Evento que manda a cargar ingresos del acreditado seleccionado.
		 * @event module:epf~.cargaIngBD
		 * @type {object}
		 * @listens click
		 */
		$(".cargaIngBD").unbind("click");
		$(".cargaIngBD").on("click",function(){
			let acreditado = String(String($("#selectAcreditado").val()).split("#@@#")[0]);
			let idElemABusq = "#anioIniIng";
			let anioIniBusqueda = $(idElemABusq).val();
			if($.isNumeric(anioIniBusqueda)){ //Si ya eligio anio, puede continuar busqueda, si no no puede
				if(acreditado != "0"){
					//Quitamos tooltip previo si existe
					$(idElemABusq).hasClass("tooltipstered") ? fComun.destruyeTooltip(idElemABusq):"";
					fcs.cargaIngDesdeBD(acreditado,anioIniBusqueda);
				}
			}else{
				let textoErr = "Selecciona un a\u00F1o";
				$(idElemABusq).hasClass("tooltipstered") ? "" :
										fComun.creaTooltipSM(idElemABusq,textoErr,'top');
			}
		});
		
		/**
		 * Evento para obtener informacion de excel elegido de ingresos.
		 * @event module:epf~#cargaExcelIng
		 * @type {object}
		 * @listens change
		 */
		$("#cargaExcelIng").unbind("change");
		$('#cargaExcelIng').on('change',function(){
			let tam = $(this).val().length;
			if(tam > 0){
				let fileName = $(this)[0].files[0].name;
	            $(this).next('.custom-file-label').html(fileName);
	            let fd = new FormData(); 
	            let files = $(this)[0].files[0]; 
	            fd.append('file', files); 
	            let idEdoMun = String($("#selectAcreditado").val()).split("#@@#")[0];
	            let nomEdoMun = $("#selectAcreditado :selected").text();
	            fd.append('claveEdoMun',idEdoMun);
	            fd.append('edoMun',nomEdoMun);
	            fd.append('usuario',$("#usuario").html());
	            fd.append('rol',$("#rol").html())
	            fcs.cargaDatosExcel(fd,1);
	            $(this).val("");
			}
        });
		
		/**
		 * Evento que permite seleccionar todos los checkbox en la carga de ingresos.
		 * @event module:epf~#checkCargIng
		 * @type {object}
		 * @listens change
		 */
		$("#checkCargIng").unbind("change");
		$("#checkCargIng").on("change", function(){
			let table = $('#tablaCargaIng').DataTable();
			let valorCheck = $(this).prop("checked");
			table.rows(table.rows({ page: 'current' }).eq(0).filter( function (rowIdx) {
			     $(table.cell(rowIdx,0).node()).find(".checkBoxCargaIng").prop("checked",valorCheck);
			}));
		});
		
		/**
		 * Evento que valida ingresos a cargar en sistema desde la fuente de informacion elegida.
		 * @event module:epf~#validaCargaIng
		 * @type {object}
		 * @listens click
		 */
		$("#validaCargaIng").unbind("click");
		$("#validaCargaIng").on("click", function(){
			fcs.validaCargaIngSelec();
		});
		
		/**
		 * Evento que valida ingresos cargados en el sistema.
		 * @event module:epf~#validarIngFin
		 * @type {object}
		 * @listens click
		 */
		$("#validarIngFin").unbind("click");
		$("#validarIngFin").on("click", function(){
			fcs.validaInfoIngresos();
		});
		
		/**
		 * Evento que realiza la eliminacion del registro de ingresos.
		 * @event module:epf~#deleteAllIng
		 * @type {object}
		 * @listens click
		 */
		$("#deleteAllIng").unbind("click");
		$("#deleteAllIng").on("click", function(){
			let txtH = "Mensaje de alerta";
			let txtB = "&#191;Estas seguro de eliminar todos los ingresos cargados&#63;"
			let funcD = fcs.realizaAccionRegIng;
			let param1 = this;
			let param2 = 3;
			let numParam = 2;
			fcs.creaModalAlerta(txtH,txtB,funcD,numParam,param1,param2);
		});
		
		/**
		 * Evento que procesa la respuesta del calculo.
		 * @event module:epf~.pintaPF
		 * @type {object}
		 * @listens click
		 */
		$(".pintaPF").unbind("click");
		$(".pintaPF").on("click", function(){
			$(".okCalculo").remove();
			fcs.pintaRespuestaCalculo();
		});
		
		/**
		 * Evento que procesa el calculo masivo.
		 * @event module:epf~#generaCalculoMas
		 * @type {object}
		 * @listens click
		 */
		$("#generaCalculoMas").unbind("click");
		$("#generaCalculoMas").on("click", function(){
			fcs.generaCalculoMasivo();
		});
		
		/**
		 * .::| Evento que ayuda a mostrar modal para cancelar solicitud |::.
		 * @event module:epf~.bCancelarSol
		 * @type {object}
		 * @listens click
		 */
		$(".bCancelarSol").unbind("click");
		$(".bCancelarSol").on("click",function(){
			let idSol = String($("#numSolicitud").html());
			let txtH = "Mensaje de alerta";
			let body = "<div class='form-group'>" +
			  				"<label for='razonCS'>Por favor escribe la raz&oacute;n por la que deseas cancelar la solicitud PRF-" + idSol + ". " +
			  				"Tomando en cuenta que si confirmas la petici&oacute;n, se eliminar&aacute; la solicitud de forma permanente.</label>" +
			  				"<textarea class='form-control' id='razonCS' rows='3'></textarea>" +
			  				"<br>" +
			  				"<label for='razonCS'>&#191;Estas seguro de eliminar la solicitud PRF-" + idSol + "&#63;</label>" +
			  			"</div>";
			fcs.creaModalAlerta(txtH, body, fcs.realizaCancelacionSolicitud, 0, "", "");
		});
		
		/**
		 * .::| Evento que ayuda con la carga masiva de los creditos a evaluar |::.
		 * @event module:epf~#cargaLayoutCreds
		 * @type {object}
		 * @listens click
		 */
		$("#cargaLayoutCreds").unbind("change");
		$("#cargaLayoutCreds").on("change",function(){
			let archivo = $(this)[0].files[0];
			if(archivo){
				let fileName = $(archivo).name;
	            $(this).next('.custom-file-label').html(fileName);
	            let fd = new FormData();  
	            fd.append('file', archivo);
	            fd.append('rol', $("#rol").html());
	            fd.append('universo', $("#universo").html());
	            fcs.realizaCargaMasivaCreditos(fd);
	            $(this).val("");
			}
		});
		
		/**
		 * Evento necesario para validar el acceso a la seccion de carga de creditos a evaluar.
		 * @event module:epf~#s-credE-tab
		 * @type {object}
		 * @listens shown.bs.tab
		 */
		$("#s-credE-tab").unbind("shown.bs.tab");
		$('#s-credE-tab').on('shown.bs.tab', function () {
			let idEst = Number($("#idES").html());
			if(idEst != 4)//solo se valida cuando la solicitud no esta en estatus concluida
				fcs.validaCargaCompIngresos();
		});
		
		/**
		 * Evento que crea un escenario por credito
		 * @event module:epf~#cargaCredEsc
		 * @type {object}
		 * @listens click
		 */
		$("#cargaCredEsc").unbind("click");
		$("#cargaCredEsc").on("click", function(){
			let txtH = "Mensaje de alerta";
			let txtB = "&#191;Estas seguro de eliminar los escenarios actuales y cargar un escenario por cr&eacute;dito a evaluar completado&#63;"
			let funcD = fcs.creaEscenarioXCreditoComp;
			fcs.creaModalAlerta(txtH, txtB, funcD, 0, "", "");
		});
		
		/**
		 * Evento que descarga por escenario su porcentaje a fideicomitir.
		 * @event module:epf~#descargaPFdeE
		 * @type {object}
		 * @listens click
		 */
		$("#descargaPFdeE").unbind("click");
		$("#descargaPFdeE").on("click", function(){
			fcs.descargaExcelconPF();
		});
		
		/**
		 * Evento que ayuda en habilitar el select del deudor solidario, aval, etc.
		 * @event module:epf~.tipoDeuda
		 * @type {object}
		 * @listens click
		 */
		$(".tipoDeuda").unbind("change");
		$(".tipoDeuda").on("change", function(){
			let valTD = Number($(this).val());
			$(".opcDeudor").hide();
			if(valTD > 1){ 
				$(".opcDeudor").show();
				fcs.iniciaSelectDeudor();
			}
		});
		
		//Eventos de modal y dataTables complementarios
		eventosModalDTable();
		
	};
	
	/**
	 * 
	 * Funcion que inicializa los eventos principales a usar en la seccion de configuracion del sistema CEF.
	 * @return {void} 
	 * @method eventosConfiguracion
	 * @static
	 */
	const eventosConfiguracion = () => {
		
		/**
		 * Evento para buscar informacion de tabla a mostrar de parametros.
		 * @event module:epf~#busqDataTP
		 * @type {object}
		 * @listens click
		 */
		$("#busqDataTP").unbind("click");
		$("#busqDataTP").on("click", function(){
			var nomTabla = $("#selTabParam").val();
			var opcDatos = $("#opDataTP").val();
			if(nomTabla == '0'){ //Valor inicial
				if ($.fn.DataTable.isDataTable('#tablaViewParam')){
					$('#tablaViewParam').DataTable().clear().destroy();
					$('#tablaViewParam').html("");
				}
			}else{
				confAdm.viewDataTableP(nomTabla,opcDatos);
			}
		});
		
		/**
		 * Evento para obtener informacion de excel de carga masiva de ingresos.
		 * @event module:epf~#cargaExcelCMIng
		 * @type {object}
		 * @listens change
		 */
		$("#cargaExcelCMIng").unbind("change");
		$('#cargaExcelCMIng').on('change',function(){
			let tam = $(this).val().length;
			if(tam > 0){
				let fileName = $(this)[0].files[0].name;
	            $(this).next('.custom-file-label').html(fileName);
	            let fd = new FormData(); 
	            let files = $(this)[0].files[0]; 
	            fd.append('file', files); 
	            fd.append('usuario',$("#usuario").html());
	            let txtH = "Mensaje de alerta";
				let txtB = "&#191;Estas seguro de realizar la carga masiva de ingresos&#63;"
				let funcD = fcs.cargaDatosExcel;
				let param1 = fd;
				let param2 = 2;
				let numParam = 2;
				$(this).val("");
				fcs.creaModalAlerta(txtH,txtB,funcD,numParam,param1,param2);
			}
        });
		
		/**
		 * Evento para obtener informacion de excel de calculo masivo de solicitudes PF.
		 * @event module:epf~#cargaExcelCalMasSolPF
		 * @type {object}
		 * @listens change
		 */
		$("#cargaExcelCalMasSolPF").unbind("change");
		$('#cargaExcelCalMasSolPF').on('change',function(){
			let tam = $(this).val().length;
			if(tam > 0){
				let fileName = $(this)[0].files[0].name;
	            $(this).next('.custom-file-label').html(fileName);
	            let fd = new FormData(); 
	            let files = $(this)[0].files[0]; 
	            fd.append('file', files); 
	            let txtH = "Mensaje de alerta";
				let txtB = "&#191;Estas seguro de realizar el c&aacute;lculo masivo de solicitudes&#63;"
				let funcD = fcs.calculoMasivoPF;
				let param1 = fd;
				let param2 = "";
				let numParam = 1;
				$(this).val("");
				fcs.creaModalAlerta(txtH, txtB, funcD, numParam, param1, param2);
			}
        });
		
		/**
		 * Evento para realizar accion de info de param de metodologias.
		 * '0' Selecciona una accion, 
		 * '1' Agregar metodologia, 
		 * '2' Agregar parametro, 
		 * '3' Rel parametro - metodologia, 
		 * '4' Visualizar parametros
		 * @event module:epf~#selAccionPM
		 * @type {object}
		 * @listens change
		 */
		$("#selAccionPM").unbind("change");
		$('#selAccionPM').on('change',function(){
			let accion = Number($(this).val());
			//inicializamos acciones
			$(".accMet").hide();
			$("#addMet").hide();
			$("#addParamMet").hide();
			$("#relParamMet").hide();
			$("#viewParamMet").hide();
			//se decide que seccion mostrar
			if(accion > 0){ //solo si eligio una accion valida
				if(accion == 4){
					$(".accMet").show();
					$("#viewParamMet").show();
					$("#divTablaParamMet").hide();
					confAdm.actualizaMeto();
				}else if(accion == 3){
					$("#relParamMet").show();
					confAdm.actualizaParam();
				}else if(accion == 2){
					$("#addParamMet").show();
				}else{ //accion == 1
					$("#addMet").show();
				}
			}
        });
		
		/**
		 * Evento que guarda metodologias.
		 * @event module:epf~#guardaMet
		 * @type {object}
		 * @listens click
		 */
		$("#guardaMet").unbind("click");
		$("#guardaMet").on("click", function(){
			let nomCortoMet = $("#nomCortoMet").Editor("getText");
			let nomMet = $("#nombreMet").Editor("getText");
			if(String(nomCortoMet).length > 0 && String(nomMet).length > 0){ //se tiene valor de las metolodias
				let paramG = {
						nCM: nomCortoMet,
						nM: nomMet,
						usuario: $("#usuario").html()
				}
				confAdm.guardaMet(paramG);
			}else{
				let text = "Favor de llenar todos los campos para realizar el guardado.";
				let textT = "Mensaje de error"
				confAdm.msjModal(2, text, textT);
			}
		});
		
		/**
		 * Evento que guarda parametros.
		 * @event module:epf~#guardaParamMet
		 * @type {object}
		 * @listens click
		 */
		$("#guardaParamMet").unbind("click");
		$("#guardaParamMet").on("click", function(){
			confAdm.guardaParamMet();
		});	
		
		/**
		 * Evento que guarda relacion de parametros con metodologias.
		 * @event module:epf~#guardaRelParamMet
		 * @type {object}
		 * @listens click
		 */
		$("#guardaRelParamMet").unbind("click");
		$("#guardaRelParamMet").on("click", function(){
			confAdm.guardaRelParamMet();
		});
		
		/**
		 * Evento que busca la informacion de parametros por metodologia.
		 * @event module:epf~#busqDataPMet
		 * @type {object}
		 * @listens click
		 */
		$("#busqDataPMet").unbind("click");
		$("#busqDataPMet").on("click", function(){
			confAdm.llenaTParamMet();
		});
		
		/**
		 * Evento que consulta el reporte de solicitudes.
		 * @event module:epf~#busqReportSol
		 * @type {object}
		 * @listens click
		 */
		$("#busqReportSol").unbind("click");
		$("#busqReportSol").on("click", function(){
			confAdm.consultaReporteSol();
		});
	};
	
	/**
	 * 
	 * Funcion que inicializa los eventos utilizados en un modal para un datatable.
	 * @return {void} 
	 * @method eventosModalDTable
	 * @static
	 */
	const eventosModalDTable = () => {
		
		/**
		 * Evento para ajustar estilos de datatables.
		 * @event module:epf~.table.display
		 * @type {object}
		 * @listens draw.dt
		 */
		$('table.display').on('draw.dt', function () {
			solPF.cargaEstilosTablas();
			epf.accionSolicitud();
			epf.accionRegTablas();
		} );
		
		/**
		 * Evento necesario para arreglar tamaño de columnas en tabla del detalle de ingresos.
		 * @event module:epf~#modalDetIng
		 * @type {object}
		 * @listens shown.bs.modal
		 */
		$("#modalDetIng").unbind("shown.bs.modal");
		$('#modalDetIng').on('shown.bs.modal', function () {
			$("#tablaDetIng").DataTable().rows().draw();
		});
		
		/**
		 * Evento necesario para arreglar tamaño de columnas en tabla de la carga de ingresos del modal.
		 * @event module:epf~#modalCargaIng
		 * @type {object}
		 * @listens shown.bs.modal
		 */
		$("#modalCargaIng").unbind("shown.bs.modal");
		$('#modalCargaIng').on('shown.bs.modal', function () {
			$("#tablaCargaIng").DataTable().rows().draw();
		});
		
		/**
		 * Evento necesario para arreglar tamaño de columnas en tabla de escenario especifico.
		 * @event module:epf~#modalEE
		 * @type {object}
		 * @listens shown.bs.modal
		 */
		$("#modalEE").unbind("shown.bs.modal");
		$('#modalEE').on('shown.bs.modal', function () {
			$("#tablaEE").DataTable().rows().draw();
		});
		
		/**
		 * Evento necesario para arreglar tamaño de columnas en tabla de escenario especifico.
		 * @event module:epf~#modalEEPF
		 * @type {object}
		 * @listens shown.bs.modal
		 */
		$("#modalEEPF").unbind("shown.bs.modal");
		$('#modalEEPF').on('shown.bs.modal', function () {
			$("#tablaEEPF").DataTable().rows().draw();
		});
		
		/**
		 * Evento necesario para arreglar tamaño de columnas en tabla de escenarios de pf.
		 * @event module:epf~#s-escenarios-tab
		 * @type {object}
		 * @listens shown.bs.tab
		 */
		$("#s-escenarios-tab").unbind("shown.bs.tab");
		$('#s-escenarios-tab').on('shown.bs.tab', function () {
			let idEst = Number($("#idES").html());
			if(idEst != 4) //solo se validan escenarios cuando no este la solicitud como concluida
					fcs.validaSEscen();
			actualizaTablaEscenarios();
		});
		
		/**
		 * Evento que sirve para poder manipular el modal de comentarios draggable por toda la pagina eliminando el bloqueo de la pantalla inferior.
		 * @event module:epf~#modalComentarios
		 * @type {object}
		 * @listens shown.bs.modal
		 */
		$("#modalComentarios").unbind("shown.bs.modal");
		$('#modalComentarios').on('shown.bs.modal', function () {
			 $('body').removeClass('modal-open');
		});
		
	};
	
	/**
	 * 
	 * Funcion que inicializa el evento necesario para el modal de eleccion de rol.
	 * @param {Object} objB Nodo del objeto del boton donde se asigno el evento.
	 * @param {Object} objM Nodo del modal que se esta trabajando.
	 * @return {void} 
	 * @method eventoRol
	 * @static
	 */
	const eventoRol = (objB, objM) => {
		/**
		 * Solo si tiene mas de un perfil, elegir uno solo
		 * @event module:epf~ObjB
		 * @type {object}
		 * @listens click
		 */
		$(objB).unbind("click");
		$(objB).on('click', function () {
			let valor = parseInt($("#selectRol").val());
			if(valor != 0){
				solPF.iniciaComponentes(valor);
				$(objM).modal('hide');
			}
		});
	};
	
	/**
	 * 
	 * Funcion que ayuda a crear eventos especiales, es decir, con funcionalidades adicionales al dar click sobre un boton de algun modal.
	 * @param {Object} elemento Nodo del elemento al que se le desea asignar el evento.
	 * @param {Object} modal Nodo del modal donde se estara trabajando.
	 * @param {Boolean} especial Booleano que indica si se desea hacer un trato especial al elemento al dar click.
	 * @param {Object} funcionDest Funcion que sera aplicada al dar click.
	 * @param {int} numEl Parametro que indica el numero de elementos de la funcion destino que se desea aplicar.
	 * @param {Object} param1 Objecto de la primera entrada a la funcion destino.
	 * @param {Object} param2 Objecto de la segunda entrada a la funcion destino.
	 * @return {void} 
	 * @method eventoEspecial
	 * @static
	 */
	const eventoEspecial = (elemento, modal, especial, funcionDest, numEl, param1, param2) => {
		numEl = parseInt(numEl);
		
		/**
		 * Evento que ayuda a realizar alguna accion especial de algun elemento.
		 * @event module:epf~#elementoEspecial
		 * @type {object}
		 * @listens click
		 */
		$(elemento).unbind("click");
		$(elemento).on('click', function () {
			$(modal).modal('hide');
			if(especial){
				if(numEl == 0){
					funcionDest();
				}else if(numEl == 1){
					funcionDest(param1);
				}else if(numEl == 2){
					funcionDest(param1, param2);
				}
			}
		});
	};
	
	/**
	 * Funcion que ayuda a crear evento especial a los modales de tipo alerta.
	 * @param {Object} objB Nodo del elemento al que se le desea asignar el evento.
	 * @param {Object} objM Nodo del modal donde se estara trabajando.
	 * @param {int} opc Parametro que indica si sera necesario realizar una accion adicional al cerrar el modal.
	 * @return {void} 
	 * @method eventoAlerta
	 * @static
	 */
	const eventoAlerta = (objB, objM, opc) => {
		
		/**
		 * Evento que ayuda a realizar alguna accion especial del boton de cerrar de un modal de tipo alerta.
		 * @event module:epf~#botonAlerta
		 * @type {object}
		 * @listens click
		 */
		$(objB).unbind("click");
		$(objB).on('click', function () {
			$(objM).modal('hide');
			opc==1?fcs.accionSolicitud(4):"";
		});
	};
	
	/**
	 * Funcion que ayuda a crear evento especial para el modal de la aprobacion exitosa de la solicitud.
	 * @param {Object} objB Nodo del elemento al que se le desea asignar el evento.
	 * @param {Object} objM Nodo del modal donde se estara trabajando.
	 * @return {void} 
	 * @method eventoAprobSoli
	 * @static
	 */
	const eventoAprobSoli = (objB, objM) => {
		/**
		 * Evento que ayuda a refrescar la pagina tras dar click al boton del modal.
		 * @event module:epf~#botonModAprob
		 * @type {object}
		 * @listens click
		 */
		$(objB).unbind("click");
		$(objB).on('click', function () {
			$(objM).modal('hide');
			location.reload();
		});
	};
	
	/**
	 * Funcion que ayuda a crear evento necesario para saber que accion se desea aplicar a la solicitud visualizada.
	 * @return {void} 
	 * @method accionSolicitud
	 * @static
	 */
	const accionSolicitud = () => {
		/**
		 * Evento que ayuda a saber que accion se desea aplicar a la solicitud.
		 * @event module:epf~.accionSolicitud
		 * @type {object}
		 * @listens change
		 */
		$(".accionSolicitud").unbind("change");
		$(".accionSolicitud").on("change",function(){
			let rolSol = 99;
			try{
				rolSol = $(this).val().split("#@@#")[6].split("__")[0];
			}catch(e){}
			fComun.guardaVarLocalS("rolSol", rolSol);
			solPF.realizaAccionSolicitud($(this).val(),0);
			$(this).val(0);
		});
	};
	
	/**
	 * Funcion que ayuda a crear eventos necesarios para la seccion de creditos a evaluar y de ingresos.
	 * @return {void} 
	 * @method accionRegTablas
	 * @static
	 */
	const accionRegTablas = () => {

		/**
		 * Evento que realiza el modo visualizacion del detalle del credito a evaluar.
		 * @event module:epf~.viewCE
		 * @type {object}
		 * @listens click
		 */
		$(".viewCE").unbind("click");
		$(".viewCE").on("click", function(){
			fcs.realizaAccionRegCE(this,1);
		});
		
		/**
		 * Evento que realiza el modo edicion del detalle del credito a evaluar.
		 * @event module:epf~.editCE
		 * @type {object}
		 * @listens click
		 */
		$(".editCE").unbind("click");
		$(".editCE").on("click", function(){
			fcs.realizaAccionRegCE(this,2);
		});
		
		/**
		 * Evento que realiza la copia de un credito a evaluar.
		 * @eventmodule:epf~.copyCE
		 * @type {object}
		 * @listens click
		 */
		$(".copyCE").unbind("click");
		$(".copyCE").on("click", function(){
			fcs.realizaAccionRegCE(this,4);
		});
		
		/**
		 * Evento que realiza la eliminacion del registro de credito a evaluar.
		 * @event module:epf~.deleteCE
		 * @type {object}
		 * @listens click
		 */
		$(".deleteCE").unbind("click");
		$(".deleteCE").on("click", function(){
			let txtH = "Mensaje de alerta";
			let txtB = "&#191;Estas seguro de eliminar el cr&eacute;dito&#63;"
			let funcD = fcs.realizaAccionRegCE;
			let param1 = this;
			let param2 = 3;
			let numParam = 2;
			fcs.creaModalAlerta(txtH,txtB,funcD,numParam,param1,param2);
		});
		
		/**
		 * Evento que visualiza los ingresos seleccionados.
		 * @event module:epf~.viewIng
		 * @type {object}
		 * @listens click
		 */
		$(".viewIng").unbind("click");
		$(".viewIng").on("click", function(){
			fcs.realizaAccionRegIng(this,1);
		});
		
		/**
		 * Evento que realiza la eliminacion del registro de ingresos.
		 * @event module:epf~.deleteIng
		 * @type {object}
		 * @listens click
		 */
		$(".deleteIng").unbind("click");
		$(".deleteIng").on("click", function(){
			let txtH = "Mensaje de alerta";
			let txtB = "&#191;Estas seguro de eliminar el ingreso&#63;"
			let funcD = fcs.realizaAccionRegIng;
			let param1 = this;
			let param2 = 2;
			let numParam = 2;
			fcs.creaModalAlerta(txtH,txtB,funcD,numParam,param1,param2);
		});
		
		/**
		 * Evento que realiza la eliminacion del registro de ingresos.
		 * @event module:epf~.deleteRIngCred
		 * @type {object}
		 * @listens click
		 */
		$(".deleteRIngCred").unbind("click");
		$(".deleteRIngCred").on("click", function(){
			let txtH = "Mensaje de alerta";
			let txtB = "&#191;Estas seguro de eliminar el registro&#63;"
			let funcD = fcs.realizaAccionRegIng;
			let param1 = this;
			let param2 = 0;
			let numParam = 2;
			fcs.creaModalAlerta(txtH,txtB,funcD,numParam,param1,param2);
		});
	};
	
	/**
	 * Funcion que crea los eventos necesarios a utilizar dentro del datatable de escenarios de porcentaje a fideicomitir.
	 * @return {void} 
	 * @method creaEventosEscenario
	 * @static
	 */
	const creaEventosEscenario = () => {
		
		/**
		 * Evento que agrega creditos al escenario.
		 * @event module:epf~.addRowEscCred
		 * @type {object}
		 * @listens click
		 */
		$(".addRowEscCred").unbind("click");
		$(".addRowEscCred").on("click", function(){
			let elemTbody = $(this).parents().eq(2).next();
			let numElemts = parseInt($(elemTbody).find("tr").length);
			if(numElemts == 0){
				fcs.realizaAccionEscTCred(elemTbody,1);
				actualizaTablaEscenarios();
				eventoCalculo();
			}
		});
		
		/**
		 * Evento que elimina creditos al escenario.
		 * @event module:epf~.deleteEscCred
		 * @type {object}
		 * @listens click
		 */
		$(".deleteEscCred").unbind("click");
		$(".deleteEscCred").on("click", function(){
			fcs.realizaAccionEscTCred(this,2);
			actualizaTablaEscenarios();
		});
		
		/**
		 * Evento que agrega ingresos al escenario.
		 * @event module:epf~.addRowEscIng
		 * @type {object}
		 * @listens click
		 */
		$(".addRowEscIng").unbind("click");
		$(".addRowEscIng").on("click", function(){
			let elemTbody = $(this).parents().eq(2).next();
			let numElemts = parseInt($(elemTbody).find("tr").length);
			fcs.realizaAccionEscTIng(elemTbody,1,numElemts);
			actualizaTablaEscenarios();
			creaEventosEscenario();
		});
		

		/**
		 * Evento que elimina ingresos al escenario.
		 * @event module:epf~.deleteEscIng
		 * @type {object}
		 * @listens click
		 */
		$(".deleteEscIng").unbind("click");
		$(".deleteEscIng").on("click", function(){
			let elemTR = $(this).parents().eq(3); //Se obtiene el tr
			fcs.realizaAccionEscTIng(this,2,"");
			fcs.validaOpcHistIng(elemTR);
			actualizaTablaEscenarios();
			creaEventosEscenario();
		});
		
		/**
		 * Evento que ayuda a validar el historico de ingresos.
		 * @event module:epf~.opcIngEsc
		 * @type {object}
		 * @listens select2:select
		 */
		$(".opcIngEsc").unbind("select2:select");
		$('.opcIngEsc').on('select2:select', function (e) {
			let elemTR = $(this).parents().eq(3); //Se obtiene el tr
			fcs.validaOpcHistIng(elemTR);
		});
		
		/**
		 * Evento que muestra el detalle del credito elegido.
		 * @event module:epf~.viewDataCred
		 * @type {object}
		 * @listens click
		 */
		$(".viewDataCred").unbind("click");
		$(".viewDataCred").on("click",function(){
			let idCred = Number($(this).parents().eq(1).find(".opcCredEsc").val());
			( idCred != -1 )?fcs.mostrarDetalleCred(idCred):"";
		});
		
		//Eventos necesarios, para dar funcionalidad a los escenarios
		eventoCalculo();
	};
	
	/**
	 * Funcion que crea los eventos necesarios para los botones del calculo en la tabla de escenarios.
	 * @return {void} 
	 * @method eventoCalculo
	 * @static
	 */
	const eventoCalculo = () => {
		
		/**
		 * Evento que valida si se puede o no calcular escenario.
		 * @event module:epf~.botonCalcEsc
		 * @type {object}
		 * @listens click
		 */
		$(".botonCalcEsc").unbind("click");
		$('.botonCalcEsc').on('click',function(){
			let elemTR = $(this).parents().eq(1); //Se obtiene el tr
			let numEsc = $(this).next().html();
			fcs.realizaAccionEscenario(elemTR,1,numEsc);
		});
		
		/**
		 * Evento que realiza la eliminacion del escenario.
		 * @event module:epf~.deleteEsc
		 * @type {object}
		 * @listens click
		 */
		$(".deleteEsc").unbind("click");
		$(".deleteEsc").on("click", function(){
			fcs.realizaAccionEscenario(this,0,0);
			actualizaTablaEscenarios();
		});
	};
	
	/**
	 * Funcion que ayuda en la actualizacion de la informacion del datatable de la tabla de escenarios, asi como del estilo de esta.
	 * @return {void} 
	 * @method actualizaTablaEscenarios
	 * @static
	 */
	const actualizaTablaEscenarios = () => {
		fcs.cssVistaEscenario();
		let table = $("#escenariosPF").DataTable();
		table.rows().draw();
		table.columns.adjust().draw();
		$("#generaCalculoMas").prop("disabled", (table.rows().count() == 0));
		eventoCalculo();
		/*	
			Si solo puede visualizar sin proceder a validar
			se esconden botonoes de calculo
			y mostramos porcentaje dado que se tenga
		*/
		if(!fComun.getVarLocalJ("canAffect")){
			$(".botonMasEsc").hide();
			$(".botonCalcEsc").hide();
		}else{ //si puede afectar mostramos boton de calculo y borramos porcentaje de escenarios
			$(".botonMasEsc").show();
			$(".botonCalcEsc").show();
			$(".porcFid").val("");
		}
	};
	
	return{
		cargaEventosPrincipales: cargaEventosPrincipales,
		accionSolicitud:	accionSolicitud,
		eventoRol:	eventoRol,
		eventoEspecial:	eventoEspecial,
		accionRegTablas:	accionRegTablas,
		creaEventosEscenario:	creaEventosEscenario,
		eventoCalculo:	eventoCalculo,
		eventoAlerta:	eventoAlerta,
		eventoAprobSoli:	eventoAprobSoli,
		eventosConfiguracion:	eventosConfiguracion,
		actualizaTablaEscenarios:	actualizaTablaEscenarios,
		eventoCalculo:	eventoCalculo
	}
}();