/**
 * fcs es un modulo que hace el trabajo de una Clase, es decir, funciona como Clase.
 * En esta clase encontraremos la mayoria de las funciones principales del flujo completo del sistema
 * de calculo de recursos a fideicomitir, es decir, las validaciones de informacion, la lectura de informacion del front 
 * para tratarla y poder crear los objetos necesarios para manipular la solicitud, y en especial darle vida al 
 * sistema de PF para que sea dinamico con todos los elementos presentados en pantalla.
 * @module fcs
 */
const fcs = function(){
	//Variables globales
	let objEAmorti = new Object();
	let objTipoTasa = new Object();
	let objSector = new Object();
	let idxCredEval = 0;
	let dataExcel = [];
	let registrosCE = [];
	let objIngTemp = [];
	let registrosIng = {};
	let registrosTabIng = [];
	let tipoIngCompletos = {};
	let tipoIngCompletosFinal = {};
	let objGuardarTemp = {	get tipoAcreditado(){ return $("#tipoAcreditado").val(); }, 
							get calificacion(){ return $("#calificacion").val(); },
							get selectAcreditado(){ return $("#selectAcreditado").val(); },
							get idCatalogo(){ return $("#idCatalogo").val(); },
							get tipoSolicitud(){ return $("#tipoSolicitud").val(); },
							get areaSoli(){ return $("#areaSoli").val(); },
							get oportSIBA(){ return $("#oportSIBA").val(); },
							get activSIBA(){ return $("#activSIBA").val(); },
							get numSolicitud(){ return $("#numSolicitud").html(); },
							get accionGA(){ return (($.isNumeric(this.numSolicitud))?2:1); },
							get idEstSoli(){ return $("#idES").html(); },
							get usuario(){ return $("#usuario").html(); },
							get usuarioSoli(){ return $("#usuarioSol").html(); },
							get rol(){ return $("#rol").html(); },
							get token(){ return $("#token").html(); },
							get comentarios(){ return $("#comentarios").Editor("getText"); },
							get registrosCE(){ return registrosCE; },
							get registrosIng(){ return registrosIng; },
							get escenarios(){ return []; }
						};
	let objSolicitud = {}
	let elemCEorden = [".tipoProducto",".acreedor",".nomFinanciaCorto",".tipoDeuda", ".selectDeudorCE",
					   ".esqAmort",".excelEE","#sobretasa","#tasaCrec",
					   ".tipoTasa",".tasaRef","#tasaFija",
					   ".monedaCE",".montoCred","#fechaInicial",".califCred",
					   ".periodicidad",".plazoMax",".plazoInv",".plazoGracia",
					   ".tipoDestino",".destinoEspecif","#checkFR",".tipoFondReserv",
					   ".monedaFR","#montoFR",".numPeriodFR","#checkCob",".tipoCobTasa",
					   ".periodicidadCobT","#tasaFijaCob","#tasaEjercicio",".plazoCobTas","#porcentajeCobTasa"
					   ];
	//identificadores elementos de tipo select vista Credito a evaluar
	let elemSelVCE = [".tipoProducto",".acreedor",".tipoDeuda",".selectDeudorCE",".esqAmort",
					  ".excelEE",".tipoTasa",".tasaRef",".monedaCE",".califCred",
					  ".periodicidad",".plazoMax",".plazoInv",".plazoGracia",
					  ".tipoDestino",".tipoFondReserv",".monedaFR",
					  ".tipoCobTasa",".periodicidadCobT",".plazoCobTas"];
	//identificadores elementos de tipo input vista Credito a evaluar
	let elemInpVCE = [".nomFinanciaCorto","#cargaExcelEAE","#sobretasa","#tasaCrec",
					  "#tasaFija",".montoCred","#fechaInicial",".destinoEspecif",
					  "#checkFR","#montoFR",".numPeriodFR","#checkCob","#tasaFijaCob",
					  "#tasaEjercicio","#porcentajeCobTasa"];
	//Se asigna width a cada elemento de la vista Credito a evaluar
	let tamElemVCE = {".tipoProducto": "250px", ".acreedor": "510px", 
					  ".tipoDeuda": "215px", ".selectDeudorCE": "805px", ".esqAmort": "215px", 
					  ".excelEE": "170px", ".tipoTasa": "268px", 
					  ".tasaRef": "223px", ".monedaCE": "273px",
					  "#fechaInicial": "228px", ".califCred": "250px", 
					  ".periodicidad": "241px", ".plazoMax": "229px", 
					  ".plazoInv": "222px", ".plazoGracia": "245px",
					  ".tipoDestino": "241px", ".tipoFondReserv": "190px",
					  ".monedaFR": "270px", ".numPeriodFR": "140px",
					  ".tipoCobTasa": "195px", ".periodicidadCobT": "240px",
					  ".plazoCobTas": "215px"
					  };
	let textoError = "Campo obligatorio";
	let textoTasaFijaNull = "<center>Dado que no se captur&oacute; la tasa fija, <br>" +
							"se usar&aacute; la tasa de estr&eacute;s proporcionada <br>" +
							"por la Direcci&oacute;n de Politica Financiera.</center>";
	let textoSobretasaNull = "<center>Dado que no se captur&oacute; la sobretasa, <br>" +
							"se usar&aacute; la sobretasa de estr&eacute;s proporcionada <br>" +
							"por la Direcci&oacute;n de Politica Financiera.</center>";
	let textoErrorRep = "Opci&oacute;n repetida";
	let textoPlazosGI = "Suma de plazo de gracia e inversi&oacute;n<br> " +
						"deben ser menores al plazo m&aacute;ximo<br> " +
						"del cr&eacute;dito.";
	let textoPlazoCT = "Plazo de cobertura tiene que ser<br> " +
						"menor o igual a plazo m&aacute;ximo.";
	let textoPlazoFR = "Se han seleccionado m&aacute;s de 3 meses<br> " +
						"para el periodo SD del fondo de reserva.";
	let textoTasas = "Porcentaje debe ser mayor a<br> " +
					  "0% y su limite es de 30%."
	let objRespCalc = [];
	
	/**
	 * Funcion que carga los catalogos iniciales y necesarios en elementos Select para ser usados en el flujo de carga de una solicitud 
	 * @param {int} opc Parametro que tiene el tipo de visualizacion de la solicitud (nueva, edicion, visualizacion)
	 * @param {Object} param Parametro que tiene el objeto con la informacion de la solicitud que se esta copiando o editando.
	 * @return {void} 
	 * @method cargaCatalogos
	 * @static
	 */
	const cargaCatalogos = (opc, param) => {
			try{
				registrosCE = []; //Inicializamos objeto de creditos a evaluar
				solPF.cargaMenuLlenadoBotones();
				fl.cargaTablasP2();
				let obj = fComun.getVarLocalJ("catalogos");
				/*Cargamos acreditados*/
				if(obj.estatusEdoMun == 200){
					let dataS = []
					for(values in obj.catalogEdoMun){
						dataS.push({id: obj.catalogEdoMun[values][0], text: obj.catalogEdoMun[values][1]})
					}
					fl.select2('#selectAcreditado',dataS,1);			
					$('#selectAcreditado').val("0#@@#CXXXXXX").trigger("change");
				}
				/*Cargamos tipos de acreditado*/
				if(obj.estatusTA == 200){
					let dataS = []
					for(values in obj.catalogTA){
						dataS.push({id: obj.catalogTA[values][0], text: obj.catalogTA[values][1]})
					}
					fl.select2('#tipoAcreditado',dataS,1);			
					$('#tipoAcreditado').val(0);
				}
				/*Cargamos calificaciones*/
				if(obj.estatusCalif == 200){
					let dataS = []
					for(values in obj.catalogCalif){
						let texto = obj.catalogCalif[values][1];
						let value = obj.catalogCalif[values][0];
						texto = String(texto).replace("SC","No calificado");
						dataS.push({id: value, text: texto})
					}	
					fl.select2('#calificacion',dataS,1);
					$('#calificacion').val("SC#@@#Local");
					fl.select2('.califCred',dataS,1);
					$('.califCred').val("SC#@@#Local");
				}
				/*Cargamos Tipo solicitud*/
				if(obj.estatusTS == 200){
					let dataS = []
					for(values in obj.catalogTS){
						dataS.push({id: obj.catalogTS[values][0], text: obj.catalogTS[values][1]})
					}
					fl.select2('#tipoSolicitud',dataS,1);
					$('#tipoSolicitud').val(0).trigger("change");
				}
				/*Cargamos Areas Solicitantes*/
				if(obj.estatusAS == 200){
					let dataS = []
					for(values in obj.catalogAS){
						let value = obj.catalogAS[values][0];
						let texto = obj.catalogAS[values][1];
						texto = (value=='000000')?texto.replace("["+value+"]",""):texto;
						dataS.push({id: value, text: texto})
					}
					fl.select2('#areaSoli',dataS,1);
					$('#areaSoli').val("000000");
				}
				/*Cargamos tipos amortizacion*/
				if(obj.estatusEAP == 200){
					let obj2 = obj.catalogEAP;
					let objTemp = []
					let producto = 0;
					objEAmorti = new Object();
					for(idx in obj2){
						let niv1 = obj2[idx][0];
						let niv2 = obj2[idx][1];
						let valor = obj2[idx][2];
						if(producto == niv1){
							objTemp.push({id: niv2, text: valor})
						}else{
							objEAmorti[producto] = objTemp;
							objTemp = [];
							objTemp.push({id: niv2, text: valor})
							producto = niv1;
						}
						if((obj2.length -1) == idx){
							objEAmorti[producto] = objTemp;
						}
					}
				}
				/*Cargamos tipo de tasa*/
				if(obj.estTipoTasa == 200){
					let obj2 = obj.ctlgTipoTasa;
					let objTemp = []
					let idEA = 0;
					objTipoTasa = new Object();
					for(idx in obj2){
						let niv1 = obj2[idx][0];
						let niv2 = obj2[idx][1];
						let valor = obj2[idx][2];
						if(idEA == niv1){
							objTemp.push({id: niv2, text: valor})
						}else{
							objTipoTasa[idEA] = objTemp;
							objTemp = [];
							objTemp.push({id: niv2, text: valor})
							idEA = niv1;
						}
						if((obj2.length -1) == idx){
							objTipoTasa[idEA] = objTemp;
						}
					}
				}
				/*Cargamos Tipo Producto*/
				if(obj.estatusTP == 200){
					let dataS = []
					for(values in obj.catalogTP){
						dataS.push({id: obj.catalogTP[values][0], text: obj.catalogTP[values][1]})
					}
					fl.select2('.tipoProducto',dataS,1);	
					$('.tipoProducto').val(0).trigger("change");
				}
				/*Cargamos acreedores*/
				if(obj.estatusAcreedor == 200){
					let dataS = []
					for(values in obj.catalogoAcreedor){
						dataS.push({id: obj.catalogoAcreedor[values][0], text: obj.catalogoAcreedor[values][1]})
					}
					fl.select2('.acreedor',dataS,1);	
					$('.acreedor').val("52#@@#BANOBRAS").trigger("change");
				}
				/*Cargamos tipo deuda*/
				if(obj.estTipoDeuda == 200){
					let dataS = []
					for(values in obj.ctlgTipoDeuda){
						dataS.push({id: obj.ctlgTipoDeuda[values][0], text: obj.ctlgTipoDeuda[values][1]})
					}
					fl.select2('.tipoDeuda',dataS,1);	
					$('.tipoDeuda').val("0").trigger("change");
				}
				/*Cargamos Moneda*/
				if(obj.estatusMon == 200){
					let dataS = []
					for(values in obj.catalogMon){
						dataS.push({id: obj.catalogMon[values][0], text: obj.catalogMon[values][1]})
					}
					fl.select2('.moneda',dataS,1);
					$('.moneda').val(1).trigger("change");
				}
				/*Cargamos Tipo Destino*/
				if(obj.estTipoDest == 200){
					let dataS = []
					for(values in obj.ctlgTipoDest){
						dataS.push({id: obj.ctlgTipoDest[values][0], text: obj.ctlgTipoDest[values][1]})
					}
					fl.select2('.tipoDestino',dataS,1);
					$('.tipoDestino').val(0).trigger("change");
				}
				/*Cargamos Tasa Referencia*/
				if(obj.estTasaRef == 200){
					let dataS = []
					for(values in obj.ctlgTasaRef){
						dataS.push({id: obj.ctlgTasaRef[values][0], text: obj.ctlgTasaRef[values][1]})
					}
					fl.select2('.tasaRef',dataS,1);
					$('.tasaRef').val(0).trigger("change");
				}
				/*Cargamos Tipo fondo de reserva*/
				if(obj.estFondoRva == 200){
					let dataS = []
					for(values in obj.ctlgFondoRva){
						dataS.push({id: obj.ctlgFondoRva[values][0], text: obj.ctlgFondoRva[values][1]})
					}
					fl.select2('.tipoFondReserv',dataS,1);
					$('.tipoFondReserv').val(0).trigger("change");
				}
				/*Cargamos Tipo cobertura tasa*/
				if(obj.estatusTCT == 200){
					let dataS = []
					for(values in obj.ctlgTCT){
						dataS.push({id: obj.ctlgTCT[values][0], text: obj.ctlgTCT[values][1]})
					}
					fl.select2('.tipoCobTasa',dataS,1);
				}
				/*Cargamos Periodicidad*/
				if(obj.estatusPer == 200){
					let dataS = [];
					let plazoMax = "";
					for(values in obj.catalogPer){
						plazoMax = parseInt(obj.catalogPer[values][2])*30;
						dataS.push({id: obj.catalogPer[values][0] + "#@@#" + plazoMax, 
									text: obj.catalogPer[values][1]})
					}
					fl.select2('.periodicidad',dataS,1);
					fl.select2('.periodicidadCobT',dataS,1);
					$('.periodicidad').val("0#@@#0").trigger("change");
				}
				/*Cargamos Tipo cobertura GPO*/
				if(obj.estatusTC == 200){
					let dataS = []
					for(values in obj.catalogTC){
						dataS.push({id: obj.catalogTC[values][0], text: obj.catalogTC[values][1]})
					}
					fl.select2('.tipoCobertura',dataS,1);		
					$('.tipoCobertura').val(0);
				}
				/*Cargamos select de esquema especifico*/
				let dataS = [{id: 0, text: 'Elige esquema esp.'}]
				fl.select2('.excelEE',dataS,-1);
				/*activamos el tipo de carga de ingresos por default*/
				$(".cargaIngRadio").trigger("change");
			}catch(e){console.log(e)}
			//deshabilitamos sección de fondo de reserva
			$("#checkFR").prop("checked",false).trigger("change");
			//deshabilitamos sección de cobertura de tasa
			$("#checkCob").prop("checked",false).trigger("change");
			cssVistaCaptura();
			if(opc == 2){ //Solo si estamos editando o copiando una solicitud existente
				solPF.pintaSolicitud(param);
			}
	};
	
	/**
	 * Funcion que ayuda a inicializar el select del deudor solidario, aval, etc;
	 * obteniendo los nombres directamente de CRM.
	 * @return {void} 
	 * @method iniciaSelectDeudor
	 * @static
	 */
	const iniciaSelectDeudor = () => {
		/*Se inicializa select para deudor solidario, aval, etc*/
		$('.selectDeudorCE').select2({
			dropdownAutoWidth : true,
			width: 'auto',
			minimumInputLength: 3,
			language: {
				inputTooShort: function () { return "3 caracteres como m\u00EDnimo para buscar al acreditado."; },
				noResults: function() { return "Sin coincidencias =("; },
				searching: function() { return "Buscando al acreditado ... "; }
			},
			placeholder: 'Escribe nombre del acreditado',
			ajax: {
				width: 'resolve',
				url: '/buscaAcreditado/',
				dataType: 'json',
				type: "post",
				cache: false,
				data: function (term, page) {
					return {
						nombre: term
					}
				},
				processResults: function (data) {
					return {
						results: $.map(data.resultado, function(obj, index) {
							let idS = obj.ID_BP + "#@@#" + obj.NOMBRE;
							let textS = "["+obj.ID_BP+"] " + obj.NOMBRE; 
							return { id: idS , text: textS };
						})
					};
				},
			}
		});
	};
	
	/**
	 * Funcion que ajusta Look&feel de elementos mostrados en pantalla al usuario.
	 * @return {void} 
	 * @method cssVistaCaptura
	 * @static
	 */
	const cssVistaCaptura = () => {
		$(".row").css("margin-bottom", "5px");
	    $("span [role='presentation']").css("height","36px");
		$("span [role='combobox']").css("height","38px");
		$("span [role='textbox']").css("padding-top","4px");	
		$(".input-group-text").css("border-style","inset");
		$("#calificacion").next().css("width", "215px");
		$(".selectDeudorCE").next().css("width", "630px");
		$("#selectAcreditado").next().css("width", "640px");
		cssVistaCredEval();
	};
	
	/**
	 * Funcion que ajusta Look&feel de elementos mostrados en la vista de creditos a evaluar.
	 * @return {void} 
	 * @method cssVistaCredEval
	 * @static
	 */
	const cssVistaCredEval = () => {
		//Se recorren todos los elementos select2
		for(i in elemSelVCE){
			let id = elemSelVCE[i];
			let tam = tamElemVCE[id];
			if(tam != null)
				$(id).next("span").css("width", tam);
		}
		//Se recorren todos los elementos input
		for(i in elemInpVCE){
			let id = elemInpVCE[i];
			let tam = tamElemVCE[id];
			if(tam != null)
				$(id).css("width", tam);
		}
	};

	/**
	 * Funcion que actualiza las opciones del select de esquema de amortizacion de acuerdo al tipo de producto elegido.
	 * @param {int} idTipoProd Parametro que contiene el identificador del tipo de producto.
	 * @return {void} 
	 * @method actualizaEsquemas
	 * @static
	 */
	const actualizaEsquemas = (idTipoProd) => {
		valTipoProd = parseInt(idTipoProd);
		let dataEA = objEAmorti[valTipoProd];
		fl.select2('.esqAmort',dataEA,1);
		$('.esqAmort').val(0).trigger("change");
	};
	
	/**
	 * Funcion que actualiza las opciones del select de tipo de tasa de acuerdo al esquema de amortizacion elegido.
	 * @param {int} idEA Parametro que contiene el identificador del esquema de amortizacion.
	 * @return {void} 
	 * @method actualizaTipoTasa
	 * @static
	 */
	const actualizaTipoTasa = (idEA) => {
		let valEA = parseInt(idEA);
		let dataEA = objTipoTasa[valEA];
		fl.select2('.tipoTasa',dataEA,1);
		$('.tipoTasa').val(0).trigger("change");
	};
	
	/**
	 * Funcion que inicializa los plazos posibles para el plazo maximo, gracia, inversion, entre otros, de acuerdo al plazo maximo elegido por el usuario.
	 * @param {int} idPeriod Parametro que contiene el identificador de la periodicidad.
	 * @param {int} plazoMax Parametro que indica el plazo maximo elegido.
	 * @param {int} opc Parametro que indica el grupo de elementos a los que se desea aplicar los limites de plazos.
	 * @return {void} 
	 * @method setLimitesPlazos
	 * @static
	 */
	const setLimitesPlazos = (idPeriod, plazoMax, opc) => {
		plazoMax = Number(plazoMax);
		idPeriod = Number(idPeriod);
		opc = Number(opc);
		let arClassP = [];
		if(opc == 1){
			let arNomP = ["periodos","meses","bimestres","trimestres",
				  "cuatrimestres","semestres","a\u00F1os"];
			/*Cambiamos nombre de etiqueta al periodo elegido*/
			$(".nomPeriod").html(arNomP[idPeriod]);
			arClassP = [".plazoMax",".plazoInv",".plazoGracia"];
		}else{
			arClassP = [".plazoCobTas"];
		}
		for(i in arClassP){
			let arrayNum = [{id: "99.99", text: "Plazo"}]; 
			let pMax = (i==0)?plazoMax:(plazoMax - 1); //plazo maximo
			let aux = (i==0)?1:0; //Plazo inicial 0 o 1
			if(plazoMax > 0){ //solo si se eligio alguna periodicidad
				for(let j=aux; j <= pMax ;j++){arrayNum.push({id: j, text: j})}
			}
			fl.select2(arClassP[i],arrayNum,1);
			$(arClassP[i]).val("99.99");
		}
		cssVistaCaptura();
	};
	
	/**
	 * Funcion que ayuda con la actualizacion del nombre corto del financiamiento de acuerdo a los parametros elegidos en la seccion del credito.
	 * @return {void} 
	 * @method actualizaNombreCorto
	 * @static
	 */
	const actualizaNombreCorto = () => {
		let clavAcred = String($(".acreedor").val()).split("#@@#")[1];
		let montoCred = String($(".montoCred").val()).replace(new RegExp("\,|[$]",'g'),"");
		montoCred = parseFloat(parseFloat(montoCred)/Math.pow(10,6)).toFixed(1);
		montoCred = $.isNumeric(montoCred)?montoCred:"";
		let nomCorto = "(" + String(idxCredEval + 1) + ") " + clavAcred + "_" + montoCred;
		$(".nomFinanciaCorto").val(nomCorto);
	};
	
	/**
	 * Funcion que ayuda con la carga de la informacion inicial de la seccion de credito a evaluar.
	 * @param {int} idxCred Parametro que contiene el index del credito que se procesara/trabajara.
	 * @return {void} 
	 * @method cargaInfoInicialCred
	 * @static
	 */
	const cargaInfoInicialCred = (idxCred) => {
		//inicializamos valores de elementos
		$(".vistaCredEval input").prop('disabled', false);
  		$(".vistaCredEval select").prop('disabled', false);
		valorInicialVCE();
		idxCred = parseInt(idxCred);
		if(idxCred == -1){ //Es nuevo registro de credito
			let tamOCE = parseInt(registrosCE.length);
			if(tamOCE == 0){
				idxCredEval = tamOCE;
			}else{
				idxCredEval = parseInt(registrosCE[tamOCE - 1]["NoReg"]) + 1;
			}
		}else{ //se esta editando o visualizando info del credito
			idxCredEval = idxCred;
		}
		actualizaNombreCorto();
		//Deshabilitamos campos
		let objElems = [".acreedor", ".moneda", ".tasaRef", ".tipoCobTasa", ".periodicidadCobT"];
  		fComun.setPropElems(objElems,"disabled",true);
		//Resetea tabla relacion ingresos, mecanismo de pago
		fComun.refrescaTabla("#tablaRelIngCred",[]);
		//Reseteamos valores de dataExcel
		dataExcel = [];
	};
	
	/**
	 * Funcion que ayuda con la carga de las posibles opciones de esquemas de amortizacion especificos.
	 * @param {int} opc Parametro que indica si se desea realizar carga inicial o con opciones del elemento select.
	 * @return {void} 
	 * @method cargaOpcionesExcelEE
	 * @static
	 */
	const cargaOpcionesExcelEE = (opc) => {
		let dataS = [{id: 0, text: 'Elige esquema esp.'}]
		if(opc == 1){ // 1 carga opciones, cualquier otra valor inicial
			for(values in dataExcel){
				if(dataExcel[values].datos.length > 0)
					dataS.push({id: (parseInt(values) + 1), text: dataExcel[values].title})
			}
		}
		fl.select2('.excelEE',dataS,-1);
		$(".excelEE").val("0").trigger("change");
		cssVistaCaptura();
	};
	
	/**
	 * Funcion que muestra en un modal el esquema especifico que se desea visualizar.
	 * @param {int} valor Parametro que contiene el indice del esquema de amortizacion que se desea visualizar.
	 * @return {void} 
	 * @method showTableEE
	 * @static
	 */
	const showTableEE = (valor) => {	
		$('#modalEEPF').modal('show');
		$('#modalEEPF .modal-dialog').addClass("ajustaModalEE");
		let idxData = parseInt(valor) - 1;
		let datos = [];
		let obj = dataExcel[idxData].datos;
		for(values in obj){
			let plazo = parseInt(values) + 1;
			let monto = obj[values][0];
			let amort = obj[values][1];
			datos.push([ plazo, monto, amort]);
		}
		fComun.refrescaTabla("#tablaEEPF",datos);
		solPF.cargaEstilosTablas();
	};
	
	/**
	 * Funcion que ayuda con la validacion de los campos obligatorios, necesarios para la seccion de creditos a evaluar.
	 * @param {int} opc Parametro que indica si se requiere regresar solo un booleano tras la validacion o un modal con el msj correspondiente.
	 * @return {void} 
	 * @method validaCamposObliCredEval
	 * @static
	 */
	const validaCamposObliCredEval = (opc) => {
		let completado = true;
		//Se recorren todos los elementos select2
		for(i in elemSelVCE){
			let valorNull = ["0#@@#NA","0#@@#0","99.99","null"];
			let id = elemSelVCE[i];
			//Quitamos tooltip previo si existe
			let elemento = $(id).next(".select2-container");
			$(elemento).hasClass("tooltipstered") ? fComun.destruyeTooltip(elemento):"";
			//Si el campo esta visible y no es un campo opcional
			if($(id).is(":visible") && !$(id).hasClass("campoOpc")){ 
				let valor = String($(id).val());
				//Si tiene un valor no valido el campo con valor especial
				if( (parseInt($.inArray(valor,valorNull)) != -1 && $(id).hasClass("campesp")) 
						|| (valor == '0' && !$(id).hasClass("campesp"))){ 
					fComun.creaTooltip(elemento,textoError,'top');
					completado = false;
				}
			}
		}
		//Se recorren todos los elementos input
		for(i in elemInpVCE){
			let id = elemInpVCE[i];
			//Quitamos tooltip previo si existe
			$(id).hasClass("tooltipstered") ? fComun.destruyeTooltip(id):"";
			//Si el campo esta visible y no es un campo opcional
			if($(id).is(":visible") && !$(id).hasClass("campoOpc")){
				let valor = parseInt(String($(id).val()).length);
				if(valor == 0){ //El input esta vacio
					fComun.creaTooltip(id,textoError,'top');
					completado = false;
				}
			}
			//si el campo esta visible y es tipo tasa Fija con campo vacio
			if($(id).is(":visible") && id == "#tasaFija"){
				let valor = parseInt(String($(id).val()).length);
				if(valor == 0){ //El input esta vacio
					fComun.creaTooltipWarning(id,textoTasaFijaNull,'top');
				}
			}
			//si el campo esta visible y es sobretasa con campo vacio
			if($(id).is(":visible") && id == "#sobretasa"){
				let valor = parseInt(String($(id).val()).length);
				if(valor == 0){ //El input esta vacio
					fComun.creaTooltipWarning(id,textoSobretasaNull,'top');
				}
			}
		}
		//Validamos tabla de relacion ingresos-mecanismo pago
		let table =  $("#tablaRelIngCred").DataTable();
		let tamTable = table.page.info().recordsTotal;
		$("#addRIC").hasClass("tooltipstered") ? fComun.destruyeTooltip("#addRIC"):"";
		if(tamTable > 0){
			let objTipoIngTemp = {};
			table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			    let data = this.node();
			    let nodoTI = $(data).find(".opcTipoIngRIC");
			    let nodoMP = $(data).find(".opcMecPagoRIC");
			    let nodoPI = $(data).find(".valPorIng");
			    let nodoPE = $(data).find(".valPorEtiq");
			    //Quitamos tooltip previo si existe
				let elemento1 = $(nodoTI).next(".select2-container");
				$(elemento1).hasClass("tooltipstered") ? fComun.destruyeTooltip(elemento1):"";
				let elemento2 = $(nodoMP).next(".select2-container");
				$(elemento2).hasClass("tooltipstered") ? fComun.destruyeTooltip(elemento2):"";
				$(nodoPI).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoPI):"";
				$(nodoPE).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoPE):"";
				//Validamos valores vacios
				let valTIactual = String($(nodoTI).val());
			    if(Number(valTIactual) == -1){ //opcion no valida
			    	fComun.creaTooltip(elemento1,textoError,'top');
			    	completado = false;
			    }else{ //Opcion valida
			    	if((valTIactual in objTipoIngTemp)){ //El tipo de ingreso ya ha sido seleccionado previamente
			    		fComun.creaTooltip(elemento1,textoErrorRep,'top');
			    		completado = false;
			    	}else{ //Aun no ha sido seleccionado
			    		objTipoIngTemp[valTIactual] = "OK";
			    	}
			    }
			    if(parseInt($(nodoMP).val()) == 0){
			    	fComun.creaTooltip(elemento2,textoError,'top');
			    	completado = false;
			    }
			    //Validamos valores de Porcentaje del ingreso
			    let tamPI = parseInt(String($(nodoPI).val()).length);
			    let valorPI = parseFloat($(nodoPI).val());
				if(tamPI == 0){ //No ha puesto nada 
					fComun.creaTooltip(nodoPI,textoError,'top');
					completado = false;
				}else if(valorPI <= 0 || valorPI > 100){
					let texto = "Porcentaje debe ser mayor que<br>" +
								"0% y como m&aacute;ximo 100%."
					fComun.creaTooltip(nodoPI,texto,'top');
					completado = false;
				}
				//Validamos valores de Porcentaje del ingreso etiquetado
			    let tamPE = parseInt(String($(nodoPE).val()).length);
			    let valorPE = parseFloat($(nodoPE).val());
				if(tamPE == 0){ //No ha puesto nada 
					fComun.creaTooltip(nodoPE,textoError,'top');
					completado = false;
				}else if(valorPE < 0 || valorPE >= 100){
					let texto = "Porcentaje debe ser mayor o igual<br>" +
					"que 0% y menor que 100%."
					fComun.creaTooltip(nodoPE,texto,'top');
					completado = false;
				}
			} );
		}else{
			let txtError = "Debes cargar los mecanismos de pago <br> de los ingresos asociados al cr&eacute;dito.";
			fComun.creaTooltip("#addRIC",txtError,'top');
			completado = false;
		}
		completado = validaPlazos(completado);
		completado = validaMontoPorcentaje(completado);
		//Se analiza informacion a regresar
		opc = parseInt(opc);
		if(opc == 2){ //Solo si se requiere regresar el estatus de completado
			return completado;
		}else{
			let textoTit = (completado)?"Validaci&oacute;n exitosa":"Mensaje de error";
			let textoMsj = (completado)?"Los campos obligatorios han sido completados <br> para el cr&eacute;dito a evaluar.":
										"Se detectaron campos/registros que a&uacute;n no han sido <br> completados, favor de atender los campos obligatorios.";
			creaModalSuccesError((completado?1:2),textoTit,textoMsj,false,"");
		}
	};
	
	/**
	 * Funcion que ayuda con la validacion de los plazos tales como plazo maximo, plazo de inversion, plazo de gracia, plazo de cobertura, etc.
	 * @param {Boolean} completado Parametro que sera usado como un booleano para validar si la informacion estuvo correcta.
	 * @return {Boolean} Regresa un booleano que indica si las validaciones fueron correctas o algo esta incorrecto.
	 * @method validaPlazos
	 * @static
	 */
	const validaPlazos = (completado) => {
		let objCPlazos = ['.plazoMax','.plazoInv','.plazoGracia','.numPeriodFR','.plazoCobTas'];
		let objVPlazos = [];
		let objPeriod = [0, 1, 2, 3, 4, 6, 12];
		let periodicidad = String($(".periodicidad").val()).split("#@@#")[0];
		periodicidad = objPeriod[periodicidad];
		for(idx in objCPlazos){
			let nClase = objCPlazos[idx];
			if($(nClase).is(":visible")){
				let valor = String($(nClase).val());
				valor = (valor == "99.99")?String(valor):Number(valor);
				objVPlazos.push(valor);
			}else{
				objVPlazos.push("88.88");
			}
		}
		let pMax = objVPlazos[0]; //Plazo Maximo
		//Validamos si es esquema especifico
		let idEsq = Number($(".esqAmort").val());
		if(idEsq == 6){
			let idxEE = parseInt($(".excelEE").val());
			if(idxEE > 0){
				pMax = dataExcel[idxEE-1].datos.length;
			}
		}
		let pInv = objVPlazos[1]; //Plazo Inversion
		let pGra = objVPlazos[2]; //Plazo Gracia
		let pFR = objVPlazos[3]; //Plazo Fondo de reserva
		let pCT = objVPlazos[4]; //Plazo Cobertura Tasa
		let pInvGra = 0; //Plazo inversion mas plazo gracia
		//Solo se validan plazos, si el plazo maximo es valido
		if(typeof pMax === 'number'){
			if(typeof pInv === 'number' &&  typeof pGra === 'number')
				pInvGra = pInv + pGra;
			//Si la suma del plazo de inversion y gracia es mayor al plazo maximo
			if(pInvGra >= pMax){ 
				let objInv = $(objCPlazos[1]).next(".select2-container");
				let objGra = $(objCPlazos[2]).next(".select2-container");
				$(objInv).hasClass("tooltipstered") ? fComun.destruyeTooltip(objInv):"";
				$(objGra).hasClass("tooltipstered") ? fComun.destruyeTooltip(objGra):"";
				fComun.creaTooltip(objInv,textoPlazosGI,'top');
				fComun.creaTooltip(objGra,textoPlazosGI,'top');
				completado = false;
			}
			//Si el plazo de cobertura de tasa es mayor al plazo maximo del credito
			if(typeof pCT === 'number' && pCT > pMax){
				let objCobT = $(objCPlazos[4]).next(".select2-container");
				$(objCobT).hasClass("tooltipstered") ? fComun.destruyeTooltip(objCobT):"";
				fComun.creaTooltip(objCobT,textoPlazoCT,'top');
				completado = false;
			}
		}
		//Si el numero de periodos del fondo de reserva es mayor a 3 meses (equivalencia periodicidad)
		//Solo se manda alerta, pero puede continuar con el calculo
		if(typeof pFR === 'number' && (pFR * periodicidad) > 3){
			let objPFR = $(objCPlazos[3]);
			$(objPFR).hasClass("tooltipstered") ? fComun.destruyeTooltip(objPFR):"";
			fComun.creaTooltipWarning(objPFR,textoPlazoFR,'top');
		}
		return completado;
	};
	
	/**
	 * Funcion que ayuda con la validacion de los porcentajes tales como sobretasa, tasa fija, tasa fija cobertura, etc y de igual manera de los montos del credito y fondo de reserva.
	 * @param {Boolean} completado Parametro que sera usado como un booleano para validar si la informacion estuvo correcta.
	 * @return {Boolean} Regresa un booleano que indica si las validaciones fueron correctas o algo esta incorrecto.
	 * @method validaMontoPorcentaje
	 * @static
	 */
	const validaMontoPorcentaje = (completado) => {
		let objTasas = ["#sobretasa","#tasaFija","#tasaFijaCob","#tasaEjercicio"];
		let objMonto = [".montoCred","#montoFR"];
		let tasCred = "#tasaCrec";
		for(idx in objTasas){
			let idT = objTasas[idx];
			if($(idT).is(":visible")){
				let valor = parseFloat(fComun.quitaFormato($(idT).val()));
				let tamEl = Number(String($(idT).val()).length);
				if(tamEl > 0 && (valor == 0 || valor > 30)){ //Tiene valor que comparar y el valor es mayor a 30 por ciento
					$(idT).hasClass("tooltipstered") ? fComun.destruyeTooltip(idT):"";
					fComun.creaTooltipWarning(idT,textoTasas,'top');
					if(valor == 0) //cuando pongan 0, lo consideramos como nulo
						$(idT).val("");
				}
			}
		}
		//Validamos porcentaje cobertura de tasa
		let idPCT = "#porcentajeCobTasa";
		if($(idPCT).is(":visible")){
			let valor = parseFloat(fComun.quitaFormato($(idPCT).val()));
			let tamEl = Number(String($(idPCT).val()).length);
			if(tamEl > 0 && (valor == 0 || valor > 100)){ //Tiene valor que comparar y el valor es igual a 0 o mayor a 100
				$(idPCT).hasClass("tooltipstered") ? fComun.destruyeTooltip(idPCT):"";
				let texto = "Porcentaje debe ser mayor<br>" +
				"que 0% y menor o igual a 100%.";
				fComun.creaTooltip(idPCT,texto,'top');
				completado = false;
			}
		}
		//Validamos Tasa de crecimiento
		if($(tasCred).is(":visible")){
			let valMaxTC = fComun.getVarLocalJ("catalogos");
			valMaxTC = parseFloat(valMaxTC.paramTasaCrec);
			let valor = parseFloat(fComun.quitaFormato($(tasCred).val()));
			let tamEl = Number(String($(tasCred).val()).length); 
			if(tamEl > 0 && valor > valMaxTC){
				let texto = "Porcentaje debe estar <br>" +
							"entre 0% y " + valMaxTC + "%.";
				$(tasCred).hasClass("tooltipstered") ? fComun.destruyeTooltip(tasCred):"";
				fComun.creaTooltip(tasCred,texto,'top');
				completado = false;
			}
		}
		//Validamos monto fondo de reserva
		if($(objMonto[1]).is(":visible")){
			let valMFR = parseFloat(fComun.quitaFormato($(objMonto[1]).val()));
			let tamMFR = Number(String($(objMonto[1]).val()).length); 
			let valMCred = parseFloat(fComun.quitaFormato($(objMonto[0]).val()));
			let tamMCred = Number(String($(objMonto[0]).val()).length); 
			if((tamMCred > 0 && tamMFR > 0) && valMFR > valMCred){
				let texto = "El monto del fondo de reserva debe ser<br>" +
							"menor o igual al monto del cr&eacute;dito.";
				$(objMonto[1]).hasClass("tooltipstered") ? fComun.destruyeTooltip(objMonto[1]):"";
				fComun.creaTooltip(objMonto[1],texto,'top');
				completado = false;
			}
		}
		return completado;
	};
	
	/**
	 * Funcion que genera modal de error o de exito con especificaciones especiales.
	 * @param {int} opc Parametro que indica si se desea tratar como modal de error o de exito.
	 * @param {String} textHeader Parametro que indica el titulo del modal.
	 * @param {String} textBody Parametro que contiene el mensaje que se desea poner en el cuerpo del modal.
	 * @param {Boolean} especial Booleano que indica si se desea hacer un trato especial al elemento al dar click.
	 * @param {Object} funcionAccion Funcion que sera aplicada al dar click.
	 * @param {int} numElem Parametro que indica el numero de elementos de la funcion destino que se desean aplicar.
	 * @param {Object} arg1 Objecto de la primera entrada a la funcion destino.
	 * @param {Object} arg2 Objecto de la segunda entrada a la funcion destino.
	 * @return {void} 
	 * @method creaModalSuccesError
	 * @static
	 */
	const creaModalSuccesError = (opc, textHeader, textBody, especial, funcionAccion, numElem = 0 , arg1 = "", arg2 = "") => {
		let idModal = "#modalRespGuardar";
		$(idModal + " .modal-title").html(textHeader);
		$(idModal + " .modal-header").removeClass((opc==1)?"headerModalError":"headerModalSucess");
		$(idModal + " .modal-header").addClass((opc==1)?"headerModalSucess":"headerModalError");
		$(idModal + " .textoBody").html(textBody);
		$(idModal + " .modal-body button").attr('class',(opc==1)?'btn btn-success':'btn btn-danger');
		$(idModal + " .close").addClass('regresarEspe');
		$(idModal + " .modal-body button").addClass('regresarEspe');
		epf.eventoEspecial(".regresarEspe",idModal,especial,funcionAccion,numElem,arg1,arg2);
		$(idModal).modal('show');
		fComun.ocultarEspera();
	};
	
	/**
	 * Funcion que inicializa todos los elementos select, input de la seccion de creditos a evaluar.
	 * @return {void} 
	 * @method valorInicialVCE
	 * @static
	 */
	const valorInicialVCE = () => {
		//Se recorren todos los elementos select2
		for(i in elemSelVCE){
			let id = elemSelVCE[i];
			//Quitamos tooltip previo si existe
			let elemento = $(id).next(".select2-container");
			$(elemento).hasClass("tooltipstered") ? fComun.destruyeTooltip(elemento):"";
			//ponemos valor inicial
			if(id == '.selectDeudorCE'){
				$(id).val("").trigger("change");
			}else{
				$(id).val($(id + " option:first").val()).trigger("change");
			}
		}
		//Se recorren todos los elementos input
		for(i in elemInpVCE){
			let id = elemInpVCE[i];
			//Quitamos tooltip previo si existe
			$(id).hasClass("tooltipstered") ? fComun.destruyeTooltip(id):"";
			$(id).val("");
		}
		//Ponemos en vacio campo extra de nombre corto
		$(".nomCredExt").val("");
		//Valor inicial esquemas especificos
		$("#cargaExcelEAE").next('.custom-file-label').html("Carga archivo Excel");
		cargaOpcionesExcelEE(2);
		//Valor inicial para credito a evaluar en accreedor
		$('.acreedor').val("52#@@#BANOBRAS").prop("disabled",true).trigger("change");
		$("#checkFR").prop("checked",false).trigger("change");
		$("#checkCob").prop("checked",false).trigger("change");
		$('.tipoDeuda').val("0").trigger("change");
		$('.tipoCobTasa').val("1").trigger("change");
		//Deshabilitamos sección de cobertura y bloqueamos cuando rol es diferente a riesgos
		let rol = Number($("#rol").html());
		if(rol < 12 || rol > 13){
		  	$("#checkCob").prop("checked",false).prop("disabled",true).trigger("change");
		}
		cssVistaCaptura();
	};
	
	/**
	 * Funcion que ayuda a guardar el registro de un credito a evaluar en un objeto para procesarlo posteriormente en un datatable.
	 * @return {void} 
	 * @method guardaRegistroCE
	 * @static
	 */
	const guardaRegistroCE = (opcion) => {
		let objCE = {};
		objCE["estatus"] = validaCamposObliCredEval(2);
		objCE["NoReg"] = idxCredEval;
		objCE["nomPeriod"] = $(".nomPeriod").html();
		objCE["tipoCred"] = $("#tipoCred").html();
		objCE["esquema"] = (parseInt($(".esqAmort").val()) > 0)?$(".esqAmort option:selected").text():"";
		//Inicializamos objeto
		for(i in elemCEorden){
			objCE[elemCEorden[i]] = "";
		}
		//Se recorren todos los elementos de vista cred a evaluar
		for(i in elemCEorden){
			let id = elemCEorden[i];
			//Si el campo esta visible
			if($(id).is(":visible")){ 
				let valor = String($(id).val());
				objCE[id] = valor;
			}
		}
		//Guardamos check de fondo de reserva
		objCE["#checkFR"] = $("#checkFR").is(':checked');
		//Guardamos check de cobertura de tasa 
		objCE["#checkCob"] = $("#checkCob").is(':checked');
		//Guardamos valores de tabla ingresos-mecanismo de pago
		creaObjIngMP(objCE);
		//Guardamos esquema especifico si se tiene
		let idxEE = parseInt($(".excelEE").val());
		objCE["idxEsqEsp"] = idxEE;
		if(idxEE > 0){
			dataExcel[idxEE-1].title = "Esquema 1";
			objCE[".excelEE"] = 1;
			objCE["dataEsqEsp"] = dataExcel[idxEE-1];
			//Guardamos informacion de plazos cuando es especifico
			objCE[".plazoMax"] = dataExcel[idxEE-1].datos.length;
			objCE[".plazoInv"] = 0; //se pone 0 porque ya viene especificado en el esquema
			objCE[".plazoGracia"] = 0; //se pone 0 porque ya viene especificado en el esquema
		}
		//se completa nombre corto del credito
		objCE[".nomFinanciaCorto"] += "#@@#" + $(".nomCredExt").val();
		objCE[".monedaCEText"] = $(".monedaCE option:selected").text();
		//asignamos el registro de credito a evaluar
		registrosCE[idxCredEval] = objCE;
		if(opcion == 1){
			let textoTit = "Guardado de cr&eacute;dito a evaluar";
			let textoMsj = "Se ha realizado el guardado exitoso <br> del cr&eacute;dito a evaluar proporcionado.";
			let f = fcs.recargaTablaCredEval;
			actualizaCamposEscenario(1);
			creaModalSuccesError(1, textoTit, textoMsj, true, f);
		}else{
			$(".menuBotones[target='cancelarRowAdd']").trigger("click");
		}
	};
	
	/**
	 * Funcion que ayuda a crear un objeto con la informacion de los ingresos del mecanismo de pago.
	 * @param {Object} obj Objeto que contiene la informacion del credito a evaluar.
	 * @return {void} 
	 * @method creaObjIngMP
	 * @static
	 */
	const creaObjIngMP = (obj) => {
		let table =  $("#tablaRelIngCred").DataTable();
		let tamTable = table.page.info().recordsTotal;
		let prioridadMP = String(fComun.getVarLocalJ("catalogos").prioridadMP).split("@@");
		let objTIMP = [];
		let objMP = [];
		let mecanismo = "";
		if(tamTable > 0){ //Solo si tiene informacion la tabla recorremos
			table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
				    let data = this.node();
				    let valorTI = $(data).find(".opcTipoIngRIC").val();
				    let valorMP = $(data).find(".opcMecPagoRIC").val();
				    let valorPI = $(data).find(".valPorIng").val();
				    let valorPE = $(data).find(".valPorEtiq").val();
				    objTIMP.push([valorTI,valorMP,valorPI,valorPE]);
				    objMP.push(parseInt(valorMP));
			});
			mecanismo = validarPrioridadMP(prioridadMP,objMP);
		}
		obj["dataTabIngMP"] = objTIMP;
		obj["mecanismo"] = mecanismo;
	};
	
	/**
	 * Funcion que valida la prioridad en la que se deben tomar los mecanismos de pago.
	 * @param {Array} objPrioridad Array que contiene las prioridades de los mecanismos de pago.
	 * @param {Array} valuesMP Array que contiene los valores de los mecanismos de pago para los ingresos elegidos en la seccion de creditos a evaluar.
	 * @return {void} 
	 * @method validarPrioridadMP
	 * @static
	 */
	const validarPrioridadMP = (objPrioridad, valuesMP) => {
		for(idx in objPrioridad){
			let valPMP = parseInt(objPrioridad[idx]);
			if(parseInt($.inArray(valPMP,valuesMP)) >= 0){
				return valPMP;
			}
		}
	};
	
	/**
	 * Funcion que refresca los valores del DataTable de creditos a evaluar.
	 * @return {void} 
	 * @method recargaTablaCredEval
	 * @static
	 */
	const recargaTablaCredEval = () => {
		$(".menuBotones[target='cancelarRowAdd']").trigger("click");
		fComun.refrescaTabla("#tablaCredEval",creaObjTablaCE());
	};
	
	/**
	 * Funcion que ayuda con la creacion del objeto necesario para pintar el DataTable de creditos a evaluar.
	 * @return {Object} Regresa un objeto con la estructura necesaria para ser procesada por un datatable. 
	 * @method creaObjTablaCE
	 * @static
	 */
	const creaObjTablaCE = () => {
		let newObjCE = [];
		let campTCE = [".nomFinanciaCorto",".plazoMax",".montoCred","esquema","estatus","NoReg","nomPeriod"];
		for(i in registrosCE){
			let tamMonto = String(registrosCE[i][campTCE[2]]).length;
			newObjCE.push([
				registrosCE[i][campTCE[0]],
				registrosCE[i][campTCE[1]],
				(((tamMonto > 0)?"$ ":"") + fComun.moneyFormat(registrosCE[i][campTCE[2]],2)),
				registrosCE[i][campTCE[3]],
				"",
				registrosCE[i][campTCE[4]] + "_-_" + registrosCE[i][campTCE[5]] + "_-_" + registrosCE[i][campTCE[6]] 
			]);
		}
		return newObjCE;
	};
	
	/**
	 * Funcion que apoya a realizar la accion solicitada en los registros de credito a evaluar.
	 * 1- ver informacion modo visualizacion, 2- ver informacion modo edicion, 3- eliminar registro, 4- copiar registro.
	 * @param {Object} elem Parametro que contiene el objeto del elemento que sera procesado.
	 * @param {int} accion Parametro que contiene la accion a realizar al elemento elegido.
	 * @return {void} 
	 * @method realizaAccionRegCE
	 * @static
	 */
	const realizaAccionRegCE = (elem, accion) => {
		accion = parseInt(accion);
		let table = $("#tablaCredEval").DataTable();
		let idxCell = table.cell($(elem).parent()).index()
		let columna = idxCell.column;
		let renglon = idxCell.row;
		let cellInfo = table.cell(renglon,(parseInt(columna) + 1)).nodes();
		let infoUtil = $(cellInfo).html();
		let idxObjSel = parseInt(String(infoUtil).split("_-_")[1]);
		if(accion == 4){ //copiar credito seleccionado
			let idxRCE = Number(registrosCE.length);
			registrosCE[idxRCE] = Object.assign({},registrosCE[idxObjSel]);
			ajustaIdxsObjCE();
			actualizaCamposEscenario(0);
		}else if(accion == 3){ //Eliminar registro de objeto y tabla
			table.row(renglon).remove().draw();
			registrosCE.splice(idxObjSel, 1);
			ajustaIdxsObjCE();
			actualizaCamposEscenario(0);
		}else if(accion == 2 || accion == 1){ // accion = 2 > modo edicion, accion = 1 > modo visualizacion
			cargaInfoDetalleCredEval(idxObjSel, accion);
		}
	};
	
	/**
	 * Funcion que apoya con la carga del detalle del credito a evaluar del registro elegido, ya sea en el modo de visualizacion (1) o edicion(2).
	 * @param {int} idxReg Parametro que contiene el index del registro del credito.
	 * @param {int} accion Parametro que contiene la accion a realizar al credito a evaluar elegido.
	 * @return {void} 
	 * @method cargaInfoDetalleCredEval
	 * @static
	 */
	const cargaInfoDetalleCredEval = (idxReg, accion) => {
		$("#seccionCapturaSoli").hide();
	  	$("#detalleCredito").show();
	  	solPF.cargaMenuDetalleOpc();
	  	fcs.cargaInfoInicialCred(idxReg);
	  	//Inicializamos registros de tabla relacion ingresos mecanismo de pago
	  	for(i in registrosCE[idxReg]["dataTabIngMP"]){
	  		$("#addRIC").trigger("click");
	  	}
	  	//Inicializamos opciones de esquemas especificos dado el caso que se tengan
	  	let idxEsqEsp = parseInt(registrosCE[idxReg]["idxEsqEsp"]);
	  	if(idxEsqEsp > 0){
	  		dataExcel.push(registrosCE[idxReg]["dataEsqEsp"]);
	  		cargaOpcionesExcelEE(1);
	  	}
	  //Cargamos informacion del detalle del credito
  		for(j in elemCEorden){
  			let valElem = registrosCE[idxReg][elemCEorden[j]];
  			let tamElem = parseInt(String(valElem).length);
  			if(tamElem > 0){ //si hay valor, se pone si no se desprecia
  				if(elemCEorden[j] == "#checkFR" || elemCEorden[j] == "#checkCob"){
  					$(elemCEorden[j]).prop("checked",valElem).trigger("change");
  				}else if(elemCEorden[j] == ".excelEE"){
  					let tam = registrosCE[idxReg]["dataEsqEsp"].datos.length;
  					$(elemCEorden[j]).val((tam==0)?"0":"1").trigger("change");
  				}else if(elemCEorden[j] == ".nomFinanciaCorto"){
  					$(".nomCredExt").val(valElem.split("#@@#")[1]);
  				}else if(elemCEorden[j] == ".selectDeudorCE"){
					let info = String(valElem).split("#@@#");
					if(String(info[0]).length > 0){
						info = "[" + info[0] + "] " + info[1];
						let newOption = new Option(info, String(valElem) , true, true);
						$(elemCEorden[j]).append(newOption).trigger('change');
						$(elemCEorden[j]).val(String(valElem)).trigger('change');
					}
  				}else{
  					$(elemCEorden[j]).val(valElem).trigger("change");
  				}
  			}
  		}
  		//Info tabla ingresos-mec pago
  		let table =  $("#tablaRelIngCred").DataTable();
		let tamTable = table.page.info().recordsTotal;
		let dataTablIngMP = registrosCE[idxReg]["dataTabIngMP"];
		if(tamTable > 0){ //Solo si tiene info la tabla
			table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
				let data = this.node();
				let valTImp = ($.inArray(dataTablIngMP[rowIdx][0], Object.keys(tipoIngCompletos)) == -1)?"-1":dataTablIngMP[rowIdx][0];
				$(data).find(".opcTipoIngRIC").val(valTImp).trigger("change");
				$(data).find(".opcMecPagoRIC").val(dataTablIngMP[rowIdx][1]).trigger("change");
				$(data).find(".valPorIng").val(dataTablIngMP[rowIdx][2]).trigger("focusout");
				$(data).find(".valPorEtiq").val(dataTablIngMP[rowIdx][3]).trigger("focusout");
			});
		}
		//Hacemos editable o no editables los elementos
	  	if(accion == 1){ //modo visualizacion
	  		$('.menuBotones').hide();
	  		$('.menuBotones[target="cancelarRowAdd"]').html("Regresar").show();
	  		$(".vistaCredEval input").prop('disabled', true);
	  		$(".vistaCredEval select").prop('disabled', true);
	  		$(".deleteRIngCred").hide();
	  		$("#addRIC").hide();
	  	}else if(accion == 2){ //modo edicion
	  		$(".vistaCredEval input").prop('disabled', false);
	  		$(".vistaCredEval select").prop('disabled', false);
	  		$(".deleteRIngCred").show();
	  		$('.menuBotones[target="cancelarRowAdd"]').html("Cancelar").show();
	  		$("#addRIC").show();
	  		let objElems = [".acreedor", ".moneda", ".tasaRef", ".tipoCobTasa", ".periodicidadCobT"];
	  		fComun.setPropElems(objElems, "disabled", true);
	  	}
	  	//Ponemos formato a los campos numericos
	  	$(".inputPorcentaje").trigger("focusout");
	  	$(".inputNumber").trigger("focusout");
	  	//Asignamos por default valor a tipo de cobertura tasa
	  	$(".tipoCobTasa").val("1").trigger("change");
	  	//Se activa evento de tipo tasa para validar cobertura
	  	if(accion == 2) //modo edicion
	  		$(".tipoTasa").trigger("change");
	  	let valTemp = String($(".periodicidadCobT").val());
		/*	Se asigna valor de .periodicidad a .periodicidadCobT
  		solo cuando la .periodicidadCobT sea igual a 0#@@#0
		 */
	  	if(valTemp == "0#@@#0"){
	  		valTemp = $(".periodicidad").val();
	  		$(".periodicidadCobT").val(valTemp).trigger("change");
	  	}
	  	//Deshabilitamos sección de cobertura y bloqueamos cuando rol es diferente a riesgos
	  	let rol = Number($("#rol").html());
		if(rol < 12 || rol > 13){
		  	$("#checkCob").prop("checked",false).prop("disabled",true).trigger("change");
		}
  		cssVistaCaptura();
	};
	
	/**
	 * Funcion que apoya con el ajuste del indice del objeto principal que contiene los creditos a evaluar. Realiza el ajuste, cuando 
	 * se eliminan registros o agregan nuevos.
	 * @return {void} 
	 * @method ajustaIdxsObjCE
	 * @static
	 */
	const ajustaIdxsObjCE = () => {
		for(i in registrosCE){
			let idxNew = parseInt(i);
			let nomCortoN = registrosCE[i][".nomFinanciaCorto"];
			nomCortoN = nomCortoN.replace(String(nomCortoN.split(" ")[0]) + " ","");
			nomCortoN = "(" + (idxNew + 1) + ") " + nomCortoN;
			registrosCE[i][".nomFinanciaCorto"] = nomCortoN;
			registrosCE[i]["NoReg"] = idxNew;
		}
		fComun.refrescaTabla("#tablaCredEval",creaObjTablaCE());
	};
	
	/**
	 * Funcion que apoya con la carga de los ingresos extraidos desde base de datos para un acreditado y desde la fecha inicial indicada.
	 * @param {int} acreditado Identificador del acreditado.
	 * @param {int} anioIniBusqueda Parametro que contiene el anio desde el cual se requieren buscar los ingresos.
	 * @return {void} 
	 * @method cargaIngDesdeBD
	 * @static
	 */
	const cargaIngDesdeBD = (acreditado, anioIniBusqueda) => {
		let param = {
    			acred: acreditado,
    			anio: anioIniBusqueda,
    			rol: $("#rol").html()
    	}
    	fComun.post("/cargaIngDesdeBD/",param, function(resp){
			try{
				respuestaCargaIngresos(resp,1);
			}catch(e){console.log(e)}
		});
	};
	
	/**
	 * Funcion que apoya a dar respuesta con un modal de la carga exitosa o erronea de la extraccion de los ingresos de la base de datos.
	 * @param {Object} obj Parametro que contiene la informacion de los ingresos extraidos de la base de datos.
	 * @param {int} opcion Parametro que indica el tipo de mensaje de error a utilizar.
	 * @return {void} 
	 * @method respuestaCargaIngresos
	 * @static
	 */
	const respuestaCargaIngresos = (obj, opcion) => {
		opcion = parseInt(opcion);
		if(obj.estatus == 200){
			objIngTemp = obj;
			modalCargaIngresos(obj);
		}else{
			let textoTit = "Mensaje de error";
			let textoMsj = "No fue posible realizar la carga de ingresos <br>" +
							"para el acreditado elegido.";
			if(opcion == 2){
				textoMsj = "<strong>Favor de revisar los insumos del Layout de ingresos.</strong><br><strong>Posible error:</strong><br>";
				textoMsj += obj.mensaje;
			}
			creaModalSuccesError(2,textoTit,textoMsj,false,"");
		}
	};
	
	/**
	 * Funcion que ayuda a generar el modal de carga de ingresos con los ingresos del acreditado encontrados.
	 * @param {Object} obj Parametro que contiene la informacion de los ingresos extraidos de la base de datos o excel.
	 * @return {void} 
	 * @method modalCargaIngresos
	 * @static
	 */
	const modalCargaIngresos = (obj) => {
		let tituloModal = "Ingresos - ";
		tituloModal += $("#selectAcreditado option:selected").text();
		$("#modalCargaIng .modal-title").html(tituloModal);
		$("#checkCargIng").prop("checked",false);
		fComun.ocultarEspera();
		fComun.refrescaTabla("#tablaCargaIng",obj.objIngBD);
		$('#modalCargaIng .modal-dialog').addClass("ajustaModalCargIng");
		$("#modalCargaIng").modal('show');
	};
	
	/**
	 * Funcion que ayuda a validar los ingresos seleccionados en el modal, para poder pintarlos en la tabla principal de ingresos y trabajar con ellos en la solicitud.
	 * @return {void} 
	 * @method validaCargaIngSelec
	 * @static
	 */
	const validaCargaIngSelec = () => {
		let table = $('#tablaCargaIng').DataTable();
		// buscamos todas los registros que han sido seleccionados
		let indexes = table.rows(table.rows().eq(0).filter( function (rowIdx) {
		    return $(table.cell(rowIdx,0).node()).find(".checkBoxCargaIng").prop("checked");
		}))[0];
		let objIngGeneral = [];
		for(idx in indexes){
			objIngGeneral.push(objIngTemp.objIngBD[indexes[idx]]);
		}
		guardaObjIngresos(objIngGeneral);
		//Refrescamos informacion en creditos
		resetIngCred();
		//Escondemos modal
		$("#modalCargaIng").modal("hide");
	};

	/**
	 * Funcion que ayuda a validar si se cumple el minimo de historico de ingresos para cada fuente de ingreso, para asi realizar el calculo,
	 * que en este caso es de 3 anios.
	 * @return {void} 
	 * @method validaInfoIngresos
	 * @static
	 */
	const validaInfoIngresos = () => {
		let sizeObj = 0;
		let opcion = 1;
		let d = new Date();
		let month = d.getMonth()+1;
		let year = d.getFullYear();
		let textoTit = "Resumen de validaci&oacute;n de ingresos";
		let textoMsj = "<span>Se ha validado que por cada <strong>fuente de Ingreso</strong> se cuente con<br>" +
						"informaci&oacute;n de al menos los <strong>3 periodos</strong> mas recientes.</span><br><br>";
		for(idx in tipoIngCompletos){
			let periodos = Number(tipoIngCompletos[idx])/12;
			textoMsj += ((periodos >= 3)?"<i class='fa fa-check-circle text-success'></i> ":
			"<i class='fa fa-exclamation-triangle text-warning'></i> ");
			textoMsj += (periodos >= 3)?(" Informaci&oacute;n completa"):( periodos + " de 3 periodos necesarios");
			textoMsj += " para <strong>" + idx + "</strong>.<br>";
			sizeObj++;
		}
		textoMsj += "<br><span class='text-danger'><strong>* El periodo de ingresos m&aacute;s reciente para cada fuente de ingreso debe ser al menos del ";
		textoMsj += "" + ((month > 1)?String(year-1):String(year-2)) + ".</strong></span><br>"
		
		if(sizeObj == 0){
			opcion++;
			textoTit = "Mensaje de error";
			textoMsj = "No es posible realizar la validaci&oacute;n de los ingresos.";
		}
		creaModalSuccesError(opcion,textoTit,textoMsj,false,"");
	};
	
	/**
	 * Funcion que realiza el guardado de los ingresos por fuente de pago en un objecto.
	 * @param {Object} ObjIng Parametro que contiene la informacion de los ingresos con los que se desea trabajar.
	 * @return {void} 
	 * @method guardaObjIngresos
	 * @static
	 */
	const guardaObjIngresos = (ObjIng) => { 
		for(j in ObjIng){
			let insertReg = true; 
			let keyIng = String(ObjIng[j][7]); //Tipo ingreso - periodo
			if(!(keyIng in registrosIng)) //Si la llave aun no existe en el objeto
				registrosIng[keyIng] = []; //inicializamos arreglo con la llave
			//Validamos si el elemento ya existe en el arreglo
			if(Number(registrosIng[keyIng].length) == 0){ //Si el arreglo con la llave X aun no tiene registros... se inserva
				registrosIng[keyIng].push(ObjIng[j]);
				insertReg = false;  //se pone en false para ya no agregar registro al final
			}else{ //La llave ya tiene registros
				let valCompare = String(ObjIng[j][8]); //tipoIngreso-periodo-mes
				for(idx in registrosIng[keyIng]){
					if(registrosIng[keyIng][idx].includes(valCompare)){ //Si ya existe registro
						registrosIng[keyIng][idx] = ObjIng[j]; //Se reemplaza registro por nuevo valor
						insertReg = false; //se pone en false para ya no agregar registro al final
						break; //Salimos de bucle for
					}
				}
			}
			if(insertReg) //Solo si no se inserto nada anteriormente, se agrega registro al objeto
				registrosIng[keyIng].push(ObjIng[j]);
		}
		creaObjetoIngTable();
	};
	
	/**
	 * Funcion que realiza el guardado de los ingresos por fuente de pago en un objecto para llenar el dataTable principal de ingresos.
	 * @return {void} 
	 * @method creaObjetoIngTable
	 * @static
	 */
	const creaObjetoIngTable = () => {
		registrosTabIng = [];
		tipoIngCompletos = {};
		tipoIngCompletosFinal = {};
		let d = new Date();
		let month = d.getMonth()+1;
		let year = d.getFullYear();
		let acreditado = $("#selectAcreditado option:selected").text();
		let keysIng = Object.keys(registrosIng);
		let tempTIngCount = {};
		let histPerdsComp = [0,1,2,3,4]; // anioActual - [anioAtual,anioAct-1,anioAct-2,anioAct-3,anioAct-4] 
		for(idx in keysIng){
			let tipoIng = keysIng[idx].split("-")[0];
			let periodo = String(keysIng[idx].split("-")[1]);
			let numMesesPeriod = String(registrosIng[keysIng[idx]].length);
			registrosTabIng.push([
				acreditado,
				tipoIng,
				periodo + "-" + numMesesPeriod,
				"",
				keysIng[idx]
			]);
			tipoIngCompletos[tipoIng] = 0;
			tipoIngCompletosFinal[tipoIng] = 0;
			tempTIngCount[keysIng[idx]] = numMesesPeriod;
		}
		//se valida a partir de que periodo se considera la historia de ingresos
		//si el mes actual es mayor a enero, borrar ultimo y si no mantener array
		(month > 1)?histPerdsComp.pop():"";
		for(llave in tempTIngCount){
			let tipoIng = String(llave).split("-")[0];
			let period = Number(String(llave).split("-")[1]);
			let numMesesPdo = Number(tempTIngCount[llave]);
			if($.inArray((year-period), histPerdsComp) !== -1) //solo contabilizar si es esta en el rango de periodos
				tipoIngCompletos[tipoIng] += ((numMesesPdo == 12)?numMesesPdo:0);
			tipoIngCompletosFinal[tipoIng] += ((numMesesPdo == 12)?numMesesPdo:0);
		}
		fComun.refrescaTabla("#tablaIngresos",registrosTabIng);
		//Valida información de ingresos en escenarios
		actualizaCamposEscenario(2);
		
	};
	
	/**
	 * Funcion que actualiza los campos contenidos en el escenario de acuerdo a la opcion deseada.
	 * @param {int} opc Parametro que contiene la opcion con la que se desea actualizar el escenario (0-Se elimina credito, 1-Se crea o edita credito, 2- actualiza campos de ingresos.)
	 * @return {void} 
	 * @method actualizaCamposEscenario
	 * @static
	 */
	const actualizaCamposEscenario = (opc) => {
		let oTable = $("#escenariosPF");
		let idEst = Number($("#idES").html());
		let opcValid = {};
		if(opc == 1 || opc == 0){ //Campos credito 1-> Se crea/edita credito, 0-> Se elimina credito
			let sCreds = $(oTable).find(".opcCredEsc").toArray(0);
			let opcSelCred = [{id: -1, text: "Elige uno"}];
			for(i in registrosCE){
				if(registrosCE[i]["estatus"]){
					let idCred = registrosCE[i]["NoReg"];
					let nomCred = registrosCE[i][".nomFinanciaCorto"].replace("#@@#","_");
					opcSelCred.push({id: idCred, text: nomCred});
					opcValid[idCred] = nomCred;
				}
			}
			for(idx in sCreds){
				let elemSel = $(sCreds[idx]);
				let valActCred = String($(elemSel).val());
				fl.select2(elemSel,opcSelCred,-1);
				valActCred = ((valActCred in opcValid) && opc==1)?valActCred:"-1";
				$(elemSel).val(valActCred).trigger("change");
				$(elemSel).next().css("width", "200px");
			}
		}else if(opc == 2){ //Campos ingresos
			let sIngs = $(oTable).find(".opcIngEsc").toArray(0);
			let opcSelIng = [{id: -1, text: "Elige uno"}];
			opcValid = {};
			for(tipoIng in tipoIngCompletos){
				if(idEst != 4){ //Aplicar condicion cuando su estatus de solicitud sea diferente a completada
					if(Number(tipoIngCompletos[tipoIng]) >= 36){
						opcSelIng.push({id: tipoIng, text: tipoIng});
						opcValid[tipoIng] = tipoIng;
					}
				}else{
					opcSelIng.push({id: tipoIng, text: tipoIng});
					opcValid[tipoIng] = tipoIng;
				}
			}
			for(idx in sIngs){
				let elemSel = $(sIngs[idx]);
				let valActIng = String($(elemSel).val());
				fl.select2(elemSel,opcSelIng,-1);
				if((valActIng in opcValid) == false){ //Si no existe la opcion del ingreso, se elimina
					$(elemSel).parents().eq(1).find(".deleteEscIng").trigger("click");
				}else{
					$(elemSel).val(valActIng).trigger("select2:select").trigger("change");
					$(elemSel).next().css("width", "120px");
				}
			}
		}
	};
	
	/**
	 * Funcion que realiza la accion elegida de los registros de ingresos en la seccion de escenarios.
	 * @param {Object} elem Parametro que contiene el objeto del elemento procesado.
	 * @param {int} accion Parametro que contiene la accion a realizar (0-Eliminar registro de tabla de relacion de ingresos credito, 1-Visualizar detalle de ingresos en tabla de ingresos, 2-eliminar registro de ingresos en tabla de ingresos, 3-Eliminar todos los ingresos de tabla de ingresos).
	 * @return {void} 
	 * @method realizaAccionRegIng
	 * @static
	 */
	const realizaAccionRegIng = (elem, accion) => {
		accion = parseInt(accion);
		if(accion ==3){ //Eliminamos todos los registros de ingresos
			registrosIng = {};
			creaObjetoIngTable();
			resetIngCred();
			actualizaCamposEscenario(2);
			actualizaCamposEscenario(1);
		}else{
			let table = $(((accion == 0)?"#tablaRelIngCred":"#tablaIngresos")).DataTable();
			let idxCell = table.cell($(elem).parent()).index();
			let columna = idxCell.column;
			let renglon = idxCell.row;
			let cellInfo = table.cell(renglon,(parseInt(columna) + 1)).nodes();
			let keyIng = $(cellInfo).html();
			if(accion == 2){ //Eliminar registro de objeto y tabla
				delete registrosIng[keyIng];
				creaObjetoIngTable();
				resetIngCred();
				actualizaCamposEscenario(2);
				actualizaCamposEscenario(1);
			}else if(accion == 1){ //accion modo visualizacion ingresos
				cargaTablaDetalleIng(keyIng);
			}else if(accion == 0){//eliminar registro de tabla tablaRelIngCred
				table.row(renglon).remove().draw();
			}
		}
	};
	
	/**
	 * Funcion que ayuda con la carga del detalle de ingresos en un modal de acuerdo a la fuente de pago elegida.
	 * @param {String} keyIng Parametro que contiene la llame del objeto de ingresos para mostrar la informacion de la fuente de pago elegida.
	 * @return {void} 
	 * @method cargaTablaDetalleIng
	 * @static
	 */
	const cargaTablaDetalleIng = (keyIng) => {
		fComun.refrescaTabla("#tablaDetIng",registrosIng[keyIng]);
		$('#modalDetIng .modal-dialog').addClass("ajustaModalCargIng");
		$('#modalDetIng').modal('show');
	};
	
	/**
	 * Funcion que ayuda con creacion del html correspondiente a la seccion de escenarios, para agregar un escenario para el calculo.
	 * @return {void} 
	 * @method creaEscenario
	 * @static
	 */
	const creaEscenario = () => {
		let t = $('#escenariosPF').DataTable();
		let htmlCred = "<table class='tablaEscCred table'>" +
							"<thead>" +
								"<tr>" +
									"<th class='centrar'>" +
										"Cr&eacute;dito " +
										"<strong style='font-size: 20px; color=#007bff' class='addRowEscCred puntero'><i class='fa fa-plus-circle'></i></strong>" +
									"</th>" +
									"<th class='centrar'>Tipo c&aacute;lculo</th>" +
									"<th class='centrar'></th>" +
								"</tr>" +
							"</thead>" +
							"<tbody>" +
							"</tbody>" +
						"</table>";
		let htmlIng = "<table class='tablaEscIng table'>" +
						"<thead>" +
							"<tr>" +
								"<th class='centrar'>" +
									"Ingresos " +
									"<strong style='font-size: 20px; color=#007bff' class='addRowEscIng puntero'><i class='fa fa-plus-circle'></i></strong>"+
								"</th>" +
								"<th class='centrar'>Tipo c&aacute;lculo</th>" +
								"<th class='centrar'>% fideicomitir</th>" +
								//"<th class='centrar'>&#191;Viable&#63;</th>" +
								"<th class='esconder'></th>" +
							"</tr>" +
						"</thead>" +
						"<tbody>" +
						"</tbody>" +
					"</table>";
		let htmlNumAnIng =  "<select class='ingHistorico' style='width: 100px' disabled>" +
								"<option value='3' selected>3 a&ntilde;os</option>"
							"</select>";
		t.row.add( [
	            'Escenario X',
	            htmlCred,
	            htmlIng,
	            htmlNumAnIng
	        ] ).draw( false );
		epf.creaEventosEscenario();
	};
	
	/**
	 * Funcion que realiza la accion del escenario, ya sea calcular o eliminar escenario.
	 * @param {Object} elem Parametro que contiene el objeto del elemento a procesar.
	 * @param {int} accion Parametro que nos indica la accion a realizar (0-Eliminar escenario, 1-Calcular escenario).
	 * @param {int} nE Parametro que contiene el numero del escenario procesado.
	 * @return {void} 
	 * @method realizaAccionEscenario
	 * @static
	 */
	const realizaAccionEscenario = (elem, accion, nE) => {
		accion = Number(accion);
		if(accion == 0){ //Eliminar
			let table = $("#escenariosPF").DataTable();
			let idxCell = table.cell($(elem).parent()).index();
			let columna = idxCell.column;
			let renglon = idxCell.row;
			table.row(renglon).remove().draw();
		}else if(accion == 1){ //Calcular escenario
			let objEsce = validaCamposEscenario(elem);
			objEsce.numEsc = nE;
			if(objEsce.calcular){ // Es posible realizar el calculo del escenario
				accionSolicitud(2, objEsce, true);
			}else{ // No es posible realizar el calculo del escenario
				let textoTit = "Mensaje de error";
				let textoMsj = "Debes completar los campos del escenario, <br>" +
								"para poder realizar el c&aacute;lculo.";
				creaModalSuccesError(2, textoTit, textoMsj, false, "");
			}
		}
	};
	
	/**
	 * Funcion que realiza la accion del escenario en la seccion de creditos.
	 * @param {Object} elem Parametro que contiene el objeto del elemento a procesar.
	 * @param {int} accion Parametro que nos indica la accion a realizar (1-Agregar registro de creditos).
	 * @return {void} 
	 * @method realizaAccionEscTCred
	 * @static
	 */
	const realizaAccionEscTCred = (elem, accion) => {
		accion = parseInt(accion);
		if(accion == 1){//Agrega registro de creditos a escenario
			let objC = fComun.getVarLocalJ("catalogos");
			let selectCred= "<select class='custom-select opcCredEsc'></select>";	
			let selectTCM= "<select class='custom-select tipoCalcMont'></select>";	
			let htmlTr = "<tr>" +
							"<td>"+selectCred+"</td>"+
							"<td>"+selectTCM+"</td>"+
							"<td><button class='btn btn-primary btn-sm viewDataCred' type='button'>Ver detalle</button></td>"+
						"</tr>";
			$(elem).append(htmlTr);
			let opcSelCred = [];
			let opcSelTCM = [];
			opcSelCred.push({id: -1, text: "Elige uno"});
			for(i in registrosCE){
				if(registrosCE[i]["estatus"]){
					let nomCred = registrosCE[i][".nomFinanciaCorto"].replace("#@@#","_");
					opcSelCred.push({id: registrosCE[i]["NoReg"], text: nomCred});
				}
			}
			let elemSel = $(elem).find(".opcCredEsc").last();
			fl.select2(elemSel,opcSelCred,-1);
			$(elemSel).val(-1).trigger("select2:select");
			$(elemSel).next().css("width", "200px");
			for(values in objC.ctlgTCM){
				opcSelTCM.push({id: objC.ctlgTCM[values][0], text: objC.ctlgTCM[values][1]})
			}
			elemSel = $(elem).find(".tipoCalcMont").last();
			fl.select2(elemSel,opcSelTCM,-1);
			$(elemSel).val(1).trigger("change").prop("disabled",true);
			$(elemSel).next().css("width", "166px");
			epf.creaEventosEscenario();
		}
	};
	
	/**
	 * Funcion que realiza la accion del escenario en la seccion de ingresos.
	 * @param {Object} elem Parametro que contiene el objeto del elemento a procesar.
	 * @param {int} accion Parametro que nos indica la accion a realizar (1-Agregar registro de ingresos, 2-Elimina registro de ingresos).
	 * @param {int} numElem Parametro que indica el numero de registros de ingresos que se han agregado al escenario.
	 * @return {void} 
	 * @method realizaAccionEscTIng
	 * @static
	 */
	const realizaAccionEscTIng = (elem, accion, numElem) => {
		accion = parseInt(accion);
		let idEst = Number($("#idES").html());
		let numIng = 0;
		for(ti in tipoIngCompletos){
			if(idEst != 4){ //Aplicar condicion cuando el estatus de solicitud sea diferente a completada
				if(Number(tipoIngCompletos[ti]) >= 36)
					numIng++;
			}else{
				numIng++;
			}
		}
		if(accion == 1 && (numElem < numIng)){//Agrega registro de ingresos a escenario
			let objC = fComun.getVarLocalJ("catalogos");
			let selectIng= "<select class='custom-select opcIngEsc'></select>";	
			let selectTCI= "<select class='custom-select tipoCalcIng'></select>";	
			let htmlTr = "<tr>" +
							"<td>"+selectIng+"</td>"+
							"<td>"+selectTCI+"</td>"+
							"<td>" +
								"<div class='input-group'>" +
									"<input type='text' class='form-control porcFid' style='text-align: right; width: 80px; height: 28px;' aria-label='Small' aria-describedby='inputGroup-sizing-sm' readonly>" +
									"<div class='input-group-append' style = 'height: 28px;'>" +
								    	"<span class='input-group-text'><strong>% </strong> <span class='iconOKC' style='padding-left: 5px;'></span></span>" +
								    "</div>" +
								"</div>" +
							"</td>"+
							//"<td><input type='checkbox' class='' id=''  value=''></td>"+
							"<td><span class='deleteEscIng text-danger px-2 puntero'><i class='fa fa-trash'></i></span></td>"+
							"<td class='esconder'></td>"+
						"</tr>";
			$(elem).append(htmlTr);
			let opcSelIng = [];
			let opcSelTCI = [];
			opcSelIng.push({id: -1, text: "Elige uno"});
			for(tipoIng in tipoIngCompletos){
				if(idEst != 4){ //Aplicar condicion cuando el estatus de solicitud sea diferente a completada
					if(Number(tipoIngCompletos[tipoIng]) >= 36)
						opcSelIng.push({id: tipoIng, text: tipoIng});
				}else{
					opcSelIng.push({id: tipoIng, text: tipoIng});
				}
			}
			let elemSel = $(elem).find(".opcIngEsc").last();
			fl.select2(elemSel,opcSelIng,-1);
			$(elemSel).val(-1).trigger("change");
			$(elemSel).next().css("width", "120px");
			for(values in objC.ctlgTCI){
				opcSelTCI.push({id: objC.ctlgTCI[values][0], text: objC.ctlgTCI[values][1]})
			}
			elemSel = $(elem).find(".tipoCalcIng").last();
			fl.select2(elemSel,opcSelTCI,-1);
			$(elemSel).val(2).trigger("change").prop("disabled",true);
			$(elemSel).next().css("width", "145px");
			epf.creaEventosEscenario();
		}else if(accion == 2){ //Elimina elemento de ingresos
			$(elem).closest('tr').remove();
		}
	};
	
	/**
	 * Funcion que ayuda a mandar un mensaje de alerta al usuario cuando modifica el acreditado de la solicitud, ya que se eliminaran todos los ingresos previamente guardados.
	 * @return {void} 
	 * @method validaMsjIngreAcred
	 * @static
	 */
	const validaMsjIngreAcred = () => {
		let tamOIng = registrosTabIng.length;
		if(tamOIng > 0){
			let textoTit = "Mensaje de alerta";
			let textoMsj = "Al cambiar de acreditado se han eliminado <br>" +
							"los ingresos previamente cargados de &eacute;ste.";
			creaModalSuccesError(2,textoTit,textoMsj,false,"");
			registrosIng = {};
			guardaObjIngresos([]);
			resetIngCred();
		}
	};
	
	/**
	 * Funcion que ayuda a resetear la informacion de los ingresos cargados en la seccion de creditos a evaluar.
	 * @return {void} 
	 * @method resetIngCred
	 * @static
	 */
	const resetIngCred = () => {
		//Borramos de los objetos de creditos la info de ingresos y ponemos estatus a no completado
		for(idx in registrosCE){
			registrosCE[idx]["dataTabIngMP"] = [];
			registrosCE[idx]["estatus"] = false;
		}
		fComun.refrescaTabla("#tablaCredEval",creaObjTablaCE());
	};
	
	/**
	 * Funcion que genera un modal de alerta.
	 * @param {String} textHeader Parametro que indica el titulo del modal.
	 * @param {String} textBody Parametro que contiene el mensaje que se desea poner en el cuerpo del modal.
	 * @param {Object} funcionAccion Funcion que sera aplicada al dar click.
	 * @param {int} numParam Parametro que indica el numero de elementos de la funcion destino que se desean aplicar.
	 * @param {Object} param1 Objecto de la primera entrada a la funcion destino.
	 * @param {Object} param2 Objecto de la segunda entrada a la funcion destino.
	 * @return {void} 
	 * @method creaModalAlerta
	 * @static
	 */
	const creaModalAlerta = (textHeader, textBody, funcionAccion, numParam, param1, param2) => {
		let idModal = "#modalAlerta";
		$(idModal + " .modal-title").html(textHeader);
		$(idModal + " .textoBody").html("<strong>"+textBody+"</strong><br>");
		$(idModal + " .close").addClass('regresarEspe');
		$(idModal + " .modal-body .btn-secondary").addClass('regresarEspe letraBlanca').html("<strong>Cancelar</strong>");
		$(idModal + " .modal-body .btn-warning").addClass('confirmAccion letraBlanca').html("<strong>Confirmar</strong>");
		epf.eventoEspecial(".regresarEspe",idModal,false,"",0,"","");
		epf.eventoEspecial(".confirmAccion", idModal, true, funcionAccion, numParam, param1, param2);
		$(idModal).modal('show');
		fComun.ocultarEspera();
	};
	
	/**
	 * Funcion que ayuda a generar la relacion de ingresos en la seccion de creditos a evaluar.
	 * @param {Object} elemBody Parametro que contiene el nodo del body del datatable que contiene la informacion de la relacion de ingresos con su mecanismo de pago.
	 * @return {void} 
	 * @method creaRelIngCred
	 * @static
	 */
	const creaRelIngCred = (elemBody) => {
		let tamIng = Object.keys(tipoIngCompletos).length;
		let table = $("#tablaRelIngCred").DataTable();
		let tamTable = table.page.info().recordsTotal;
		if(tamIng > 0){
			if(tamIng != tamTable){
				let objC = fComun.getVarLocalJ("catalogos");
				let selectTipIng= "<select class='custom-select opcTipoIngRIC'></select>";	
				let selectMecPago= "<select class='custom-select opcMecPagoRIC'></select>";	
				let inputPorcIng = "<input type='text' class='form-control inputPorcentaje valPorIng'>";
				let inputPorcEtiq = "<input type='text' class='form-control inputPorcentaje valPorEtiq'>";
				let htmlExtra = "<div class='input-group-append'>" +
					    			"<span class='input-group-text'><strong>%</strong></span>" +
					    		"</div>" +
					    		"</div>";
				table.row.add( [
					selectTipIng,
					selectMecPago,
					"<div class='input-group'>" + inputPorcIng + htmlExtra,
					"<div class='input-group'>" + inputPorcEtiq + htmlExtra,
					''
		        ] ).draw( false );
				//Creamos select para tipo de ingreso cargado en seccion de ingresos
				let dataS = []
				dataS.push({id: -1, text: "Elige un ingreso"});
				for(value in tipoIngCompletos){
					dataS.push({id: value, text: value});
				}
				let elemSel = $(elemBody).find(".opcTipoIngRIC").last();
				fl.select2(elemSel,dataS,-1);
				$(elemSel).val(-1).trigger("change");
				$(elemSel).next().css("width", "248px");
				//Creamos select de opciones de mecanismo de pago
				dataS = []
				for(value in objC.ctlgMecPag){
					dataS.push({id: objC.ctlgMecPag[value][0], text: objC.ctlgMecPag[value][1]});
				}
				elemSel = $(elemBody).find(".opcMecPagoRIC").last();
				fl.select2(elemSel,dataS,-1);
				$(elemSel).val(0).trigger("change");
				$(elemSel).next().css("width", "261px");
				fComun.validadorForm(".inputPorcentaje");
			}else{
				let textoTit = "Mensaje de error";
				let textoMsj = "No es posible agregar mas ingresos. Ya se han agregado <br>" +
								"todos los tipos de ingreso disponibles del acreditado.";
				creaModalSuccesError(2,textoTit,textoMsj,false,"");
			}
		}else{
			let textoTit = "Mensaje de error";
			let textoMsj = "No se cuenta con informaci&oacute;n de ingresos del acreditado, <br>" +
							"favor de realizar la carga de &eacute;stos en la secci&oacute;n de <strong>Ingresos</strong>.";
			creaModalSuccesError(2,textoTit,textoMsj,false,"");
		}
		cssVistaCaptura();
	};
	
	/**
	 * Funcion que ayuda a realizar la carga de informacion desde un layout de excel al sistema de porcentaje a fideicomitir.
	 * @param {Object} param Parametro que contiene la informacion necesaria para poder extraer la informacion del layout de excel.
	 * @param {int} opc Parametro que indica el layout que se desea cargar.
	 * @return {void} 
	 * @method cargaDatosExcel
	 * @static
	 */
	const cargaDatosExcel = (param, opc) => {
		opc = parseInt(opc);
		let url = (opc == 1)?"/cargaLayoutIng/":((opc == 2)?"/cargaMasivaIng/":"/cargaLayoutEE/");
		fComun.postFile(url, param, function(resp){
			try{
				let obj = resp;
				if(opc==0){ //Carga layout de esquemas especificos
					if(obj.estatus == 200){
						dataExcel = obj.esquemaEsp;
						cargaOpcionesExcelEE(1);
					}else{
						let textoTit = "Mensaje de error";
						let textoMsj = "No fue posible realizar la carga de insumos, favor de <br>" +
										"validar el archivo de carga para escenarios espec&iacute;ficos.";
						creaModalSuccesError(2,textoTit,textoMsj,false,"");
					}
				}else if(opc==1){ //Carga layout de ingresos
					try{
						let obj = resp;
						respuestaCargaIngresos(resp,2);
					}catch(e){console.log(e)}	
				}else if(opc==2){ //Carga masiva ingresos
					if(obj.estatus == 200){
						let textoTit = "Carga masiva de ingresos";
						let textoMsj = obj.mensaje;
						creaModalSuccesError(1,textoTit,textoMsj,false,"");
					}else{
						let textoTit = "Mensaje de error";
						let textoMsj = obj.mensaje;
						creaModalSuccesError(2,textoTit,textoMsj,false,"");
					}	
				}
			}catch(e){console.log(e)}
		});
	};
	
	/**
	 * Funcion que ayuda a validar si es posible mostrar la seccion de escenarios, la cual solo se muestra si la seccion de creditos a evaluar se lleno correctamente asi como la de los ingresos.
	 * @return {void} 
	 * @method validaSEscen
	 * @static
	 */
	const validaSEscen = () => {
		//Se valida que creditos esten completos
		let mostrarEscPF = false;
		for(i in registrosCE){
			if(registrosCE[i]["estatus"]) mostrarEscPF = true;
		}
		if(mostrarEscPF){
			mostrarEscPF = false;
			for(j in tipoIngCompletos){
				if(Number(tipoIngCompletos[j]) >= 36) mostrarEscPF = true; 
			}
			if(mostrarEscPF){
				$("#addE").show();
			}else{
				let textoTit = "Mensaje de error";
				let textoMsj = "No es posible realizar la carga de escenarios, <br>" +
								"ya que a&uacute;n no se ha completado la secci&oacute;n de <strong>Ingresos</strong>.";
				let accionF = () => $("#s-ingresos-tab").trigger("click");
				creaModalSuccesError(2,textoTit,textoMsj,true,accionF,0);
				$("#addE").hide();
				
			}
		}else{
			let textoTit = "Mensaje de error";
			let textoMsj = "No es posible realizar la carga de escenarios, <br>" +
							"ya que a&uacute;n no se ha completado la secci&oacute;n de <strong>Cr&eacute;ditos</strong>.";
			let accionF = () => $("#s-credE-tab").trigger("click");
			creaModalSuccesError(2,textoTit,textoMsj,true,accionF,0);
			$("#addE").hide();
		}
		
		//Validacion adicional
		//Si se entro modo visualizador
		let accion = Number(fComun.getVarLocalS("accionSoli"));
		if(accion == 1){
			$("#addE").hide();
			$(".deleteEscIng").hide();
		}
	};
	
	/**
	 * Funcion que ayuda a validar si los campos de los escenarios se encuentran cargados correctamente antes de realizar el calculo del porcentaje a fideicomitir.
	 * @param {Object} elemTR Parametro que contiene el nodo del registro del escenario al que se le desea validar la informacion minima necesaria para realizar el calculo.
	 * @return {Object} Regresa objeto con la informacion del escenario y el estatus de su validacion. 
	 * @method validaCamposEscenario
	 * @static
	 */
	const validaCamposEscenario = (elemTR) => {
		let elemCred = $(elemTR).find(".tablaEscCred").find(".opcCredEsc");
		let numSelCred = parseInt($(elemCred).length);
		let elemCredTC = $(elemTR).find(".tablaEscCred").find(".tipoCalcMont");
		let elemIng = $(elemTR).find(".tablaEscIng").find(".opcIngEsc");
		let numSelIng = parseInt($(elemIng).length);
		let elemIngTC = $(elemTR).find(".tablaEscIng").find(".tipoCalcIng");
		let histIng = $(elemTR).find(".ingHistorico").val();
		let porcentaje = $(elemTR).find(".porcFid").val();
		let objEsce = {
				creditos: [],
				ingresos: [],
				calcular: true,
				historicoIng: histIng,
				porcFidei: porcentaje
		}
		let objTemp = {};
		//Validamos seccion de creditos 
		for(let i=0; i<numSelCred; i++){
			let valorCred = String($(elemCred).eq(i).val());
			let nodoSelCred = $(elemCred).eq(i).next(".select2-container");
			let valorTCM = String($(elemCredTC).eq(i).val());
			let nodoSelTCM = $(elemCredTC).eq(i).next(".select2-container");
			//Quitamos tooltip si existen
			$(nodoSelCred).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoSelCred):"";
			$(nodoSelTCM).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoSelTCM):"";
			//Valida que se tenga algun credito seleccionado
			if(valorCred == "-1"){
				objEsce.calcular = false;
				fComun.creaTooltip(nodoSelCred,textoError,'top');
			}else{
				//Tiene valor valido 
				if((valorCred in objTemp)){ //ya se selecciono credito previamente
					objEsce.calcular = false;
					fComun.creaTooltip(nodoSelCred,textoErrorRep,'top');
				}else{ //Aun no existe en objeto
					objTemp[valorCred] = "OK";
				}
			}
			//Se valida que se cuente con al menos un tipo de calculo
			if(valorTCM == "0"){
				objEsce.calcular = false;
				fComun.creaTooltip(nodoSelTCM,textoError,'top');
			}
			objEsce.creditos.push({
										idxCred: valorCred,
										tipoCalc: valorTCM
								});
		}
		objTemp = {};
		//Validamos seccion de ingresos
		for(let i=0; i<numSelIng; i++){
			let valorTI = String($(elemIng).eq(i).val());
			let nodoSelTI = $(elemIng).eq(i).next(".select2-container");
			let valorTCI = String($(elemIngTC).eq(i).val());
			let nodoSelTCI = $(elemIngTC).eq(i).next(".select2-container");
			//Quitamos tooltip si existen
			$(nodoSelTI).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoSelTI):"";
			$(nodoSelTCI).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoSelTCI):"";
			//Validamos que se tenga al menos un tipo de ingreso seleccionado
			if(valorTI == "-1"){
				objEsce.calcular = false;
				fComun.creaTooltip(nodoSelTI,textoError,'top');
			}else{
				//Tiene valor valido 
				if((valorTI in objTemp)){ //ya se selecciono tipo de ingreso previamente
					objEsce.calcular = false;
					fComun.creaTooltip(nodoSelTI,textoErrorRep,'top');
				}else{ //Aun no existe en objeto
					objTemp[valorTI] = "OK";
				}
			}
			//Se valida que se cuente con al menos un tipo de calculo
			if(valorTCI == "0"){
				objEsce.calcular = false;
				fComun.creaTooltip(nodoSelTCI,textoError,'top');
			}
			objEsce.ingresos.push({
				tipoIng: valorTI,
				tipoCalc: valorTCI
			});	
		}
		//Se valida si el objeto de creditos o ingresos esta vacio
		let hasCred = Number(objEsce.creditos.length);
		let hasIng = Number(objEsce.ingresos.length);
		if(hasCred == 0 || hasIng == 0)
			objEsce.calcular = false;
		return objEsce;
	};
	
	/**
	 * Funcion que ayuda a validar las opciones de historia de ingresos por fuente de pago que puede elegir el usuario de acuerdo a las fuentes de pago elegidas.
	 * @param {Object} elem Parametro que contiene el nodo del registro del escenario de ingresos al que se le desea validar la informacion de las opciones de historico de ingresos.
	 * @return {void} 
	 * @method validaOpcHistIng
	 * @static
	 */
	const validaOpcHistIng = (elem) => {
		let rol = Number($("#rol").html());
		let rolPerm = [12,13]; //Perfiles riesgos
		//Solo se valida cuando es perfil de riesgos
		if($.inArray(rol,rolPerm) >= 0){
			let elemIng = $(elem).find(".opcIngEsc");
			let numSelIng = Number($(elemIng).length);
			let numPeriodos = 0;
			//Validamos seccion de ingresos
			for(let i=0; i<numSelIng; i++){
				let valorTI = String($(elemIng).eq(i).val());
				if(valorTI != "-1"){ //Solo si ha seleccionado una opcion valida
					let numPerTI = Number(tipoIngCompletosFinal[valorTI])/12;
					if(numPeriodos == 0){ //Solo para asignar el primer valor valido
						numPeriodos = numPerTI;
					}else{
						numPeriodos = (numPerTI < numPeriodos)?numPerTI:numPeriodos;
					}
				}
			}
			//Creamos opciones de select historico
			let opcSel = [{id: 3,text: "3 a\u00F1os"}];
			for(let p=4; p <= numPeriodos; p++){
				opcSel.push({id: p,text: String(p) + " a\u00F1os"});
			}
			let elemHistIng = $(elem).parents().eq(1).find(".ingHistorico");
			fl.select2(elemHistIng,opcSel,-1);	
			disaHist = (Number(opcSel.length) == 1)?true:false; 
			$(elemHistIng).val(3).prop("disabled",disaHist).trigger("change");
		}
	};
	
	/**
	 * Funcion que ayuda a realizar ajustes visuales a la tabla de escenarios.
	 * @return {void} 
	 * @method cssVistaEscenario
	 * @static
	 */
	const cssVistaEscenario = () => {
	    $("#s-escenarios span [role='presentation']").css("height","30px");
		$("#s-escenarios span [role='combobox']").css("height","32px");
		$("#s-escenarios span [role='textbox']").css("padding-top","0px");	
	};
	
	/**
	 * Funcion que ayuda a realizar la accion de la solicitud que el usuario desea aplicar.
	 * @param {int} accion Parametro que indica la accion a realizar a la solicitud (1-Guardar o editar solicitud, 2-Realizar Calculo, 3-Procesar solicitud, 4-Rechazar solicitud).
	 * @param {Object} obj Parametro que contiene informacion de la solicitud.
	 * @param {Boolean} saveObjC Parametro que indica si se debe guardar informacion para el calculo.
	 * @return {void} 
	 * @method accionSolicitud
	 * @static
	 */
	const accionSolicitud = (accion, obj, saveObjC) => {
		creaObjetoSolicitud(accion);
		let modalAprob = "#modalAprobSoliEstatus";
		objRespCalc = [];
		if(accion == 2){
			if(saveObjC)
				objSolicitud["escenarios"].push(obj);
			else
				objSolicitud["escenarios"] = obj;
		}else if(accion == 3){
			objSolicitud["tieneRiesgo"] = obj;
		}
		objSolicitud["accionSoli"] = accion;
		fComun.post2("/accionSolicitud/", objSolicitud, function(resp){
			try{
				let obj = resp;
				if(obj.estatus == 200){
					if(accion == 1){ //Se guardo o edito solicitud
						let numSoli = obj.respuesta.idSRF;
						let idES = obj.respuesta.idES;
						let nomES = obj.respuesta.nomES;
						$("#numSolicitud").html(numSoli);
						$("#estatusSoli").html(nomES);
						$("#idES").html(idES);
						texto = "Se proces&oacute; correctamente el guardado de la solicitud. <br> " +
								"<strong>Numero solicitud:</strong> PRF-"+numSoli+" ("+nomES+")";
						mostrarModalGuardar(1,texto);
						validarBotonesCambioEstatus(1);
						fComun.guardaVarLocalS("accionSoli",2);
					}else if(accion == 2){ //El calculo fue correcto
						objRespCalc = obj.respuesta;
						$('#modalProcCalPF').modal('show');
						fComun.ocultarEspera();
					}else if(accion == 3){ //Se proceso correctamente estatus solicitud
						let msjConfirm = "La aprobaci&oacute;n del porcentaje a fideicomitir se ha realizado correctamente.";
						let estatus = objSolicitud["idEstSoli"];
						msjConfirm = (estatus==1)?"La solicitud ha sido enviada correctamente para su aprobaci&oacute;n.":
									 (objSolicitud["tieneRiesgo"] && estatus != 3)?("Se ha enviado la solicitud al &aacute;rea de riesgos<br>" +
									 		 "para su validaci&oacute;n/aprobaci&oacute;n."):msjConfirm;
						$(modalAprob+" .textoBody").html(msjConfirm);
						$(modalAprob).modal('show');
						epf.eventoAprobSoli(".cierraModalAprob",modalAprob);
					}else if(accion == 4){ //Se rechazo correctamente la solicitud
						let msjConfirm = "La solicitud ha sido rechazada correctamente.";
						$(modalAprob+" .textoBody").html(msjConfirm);
						$(modalAprob).modal('show');
						epf.eventoAprobSoli(".cierraModalAprob",modalAprob);
					}
				}else{
					let palabra = (accion==1)?"guardado":(accion==2)?"c&aacute;lculo":(accion==3)?"procesamiento":"rechazo";
					texto = "No fue posible realizar el "+palabra+" de la solicitud <br>" +
							"<strong>Avisa al &aacute;rea de sistemas de la DGAAR</strong>";
					mostrarModalGuardar(2,texto);
				}
			}catch(e){console.log(e)}
		});
	};
	
	/**
	 * Funcion que ayuda a mostrar los resultados del calculo o los mensajes de error obtenidos.
	 * @return {void} 
	 * @method pintaRespuestaCalculo
	 * @static
	 */
	const pintaRespuestaCalculo = () => {
		let table = $("#escenariosPF").DataTable();
		for(idx in objRespCalc){
			let calculo = objRespCalc[idx];
			let indexEsc = Number(calculo.id) - 1;
			let porcentaje = (parseFloat(calculo.porc_final) * 100).toFixed(4);
			let tasaFijCob = (parseFloat(calculo.valTFC) * 100).toFixed(2);
			let escenario = table.row(indexEsc).node();
			let nodoPF = $(escenario).find(".porcFid");
			$(nodoPF).hasClass("tooltipstered") ? fComun.destruyeTooltip(nodoPF):"";
			if(isNaN(porcentaje)){//Si hubo error en el calculo
				let textoError = "No fue posible realizar el c&aacute;lculo del escenario <br>" +
											"<strong>Avisa al &aacute;rea de sistemas de la DGAAR</strong>";
				fComun.creaTooltipSM(nodoPF,textoError,'top');
			}else{ //si el calculo fue correcto
				$(nodoPF).val(porcentaje);
				$(escenario).find(".iconOKC").html("<i class='fa fa-check-circle text-success okCalculo'></i>");
				//solo entrar si cuenta con tasa fija de cobertura
				if(tasaFijCob > 0){
					let msj = "El resultado considera una tasa fija<br> de cobertura igual a "+tasaFijCob+"%"
					$(nodoPF).tooltipster({
							side: 'top',
							theme: 'tooltipster-noir',
							animation: 'fade',
							contentAsHTML: 'true',
				            content: '<strong>'+msj+'</strong>',
				            trigger: 'custom',
							triggerOpen: {
							        mouseenter: true,
							        tap: true
							},
							triggerClose: {
							        mouseleave: true,
							        tap: true
							}
					});
				}
			}
		}
	};
	
	/**
	 * Funcion que ayuda a validar los botones que deben presentarse a cada perfil y en la seccion especifica.
	 * @param {int} accion Parametro que indica si se pueden o no mostrar los botones. (1-se pueden mostrar, 2-esconder botones).
	 * @return {void} 
	 * @method validarBotonesCambioEstatus
	 * @static
	 */
	const validarBotonesCambioEstatus = (accion) => {
		let idRV = fComun.getVarLocalJ("idsValidador");
		accion = Number(accion);
		let rol = Number($("#rol").html());
		$('.menuBotones[target="rechazarSolicitud"]').hide();
		$('.menuBotones[target="aprobarSolicitud"]').hide();
		$('.menuBotones[target="validarRiesgo"]').hide();
		if($.inArray(rol,idRV) != -1){
			$('.menuBotones[target="rechazarSolicitud"]').show();
			$('.menuBotones[target="aprobarSolicitud"]').show();
			if(rol == 10){ //Solo mostrar si es validador GEM
				$('.menuBotones[target="validarRiesgo"]').show();
			}
		}else{
			if(accion == 1){
				$('.menuBotones[target="aprobarSolicitud"]').show();
			}
		}
	};
	
	/**
	 * Funcion que se encarga de presentar un modal de error o de guardado exitoso tras procesar el guardado de una solicitud.
	 * @param {int} opc Parametro que indica si se desea presentar modal como error o exitoso.
	 * @param {String} texto Parametro que contiene el texto que se desea poner en el cuerpo del modal.
	 * @return {void}
	 * @method mostrarModalGuardar
	 * @static
	 */
	const mostrarModalGuardar = (opc, texto) => {
		$("#modalRespGuardar .modal-title").html((opc==1)?"Guardado/Actualizaci&oacute;n exitosa":"Mensaje de error");
		$("#modalRespGuardar .modal-header").removeClass((opc==1)?"headerModalError":"headerModalSucess");
		$("#modalRespGuardar .modal-header").addClass((opc==1)?"headerModalSucess":"headerModalError");
		$("#modalRespGuardar .textoBody").html(texto);
		$("#modalRespGuardar .modal-body button").attr('class',(opc==1)?'btn btn-success':'btn btn-danger');
		$('#modalRespGuardar').modal('show');
		fComun.ocultarEspera();
	};
	
	/**
	 * Funcion que prepara la informacion de la solicitud dentro de un objeto para poder procesarla de acuerdo a la accion elegida.
	 * @param {int} accion Parametro que indica la accion de la solicitud (1-Guardar o editar solicitud, 2-Calcular solicitud, 3-Procesar solicitud, 4-Rechazar solicitud).
	 * @return {void}
	 * @method creaObjetoSolicitud
	 * @static
	 */
	const creaObjetoSolicitud = (accion) => {
		let keys = Object.keys(objGuardarTemp);
		for(idx in keys){
			let key = keys[idx];
			objSolicitud[key] = objGuardarTemp[key];
		}
		if(accion != 2){
			let tabla = $("#escenariosPF").DataTable();
			tabla.rows().every( function () { 
				objSolicitud["escenarios"].push(validaCamposEscenario(this.node()));
			});
		}
	};
	
	/**
	 * Funcion que muestra la informacion de la solicitud procesada de acuerdo a la accion elegida.
	 * @param {Object} obj Parametro que contiene la informacion de la solicitud, asi como la accion a realizar con dicha informacion (1-visualizar, 2-editar, 3-copiar solicitud).
	 * @return {void}
	 * @method cargaSolicitudAccion
	 * @static
	 */
	const cargaSolicitudAccion = (obj) => {
		let accion = Number(obj.accion);
		fComun.guardaVarLocalS("accionSoli",accion);
		fComun.guardaVarLocal("objSoliPF",obj);
		if(accion == 3){ //Copia solicitud
			$("#numSolicitud").html("xxxx");
			$("#estatusSoli").html("-----");
			$("#idES").html("");
		}else{ //Solicitud existente
			$("#numSolicitud").html(obj.idSolicitud);
			$("#estatusSoli").html(obj.nomEstSoli);
			$("#idES").html(obj.idEstSoli);
			$("#usuarioSol").html(obj.usuarioSoli);
			validarBotonesCambioEstatus(1);
		}
		if(accion == 2 || accion == 3){ // 2-Editar,  3-Copia solicitud
			$('.menuBotones[target="guardarSolicitud"]').show();
			$('.menuBotones[target="#modalComentarios"]').show();
			$("#s-ingresos .form-row").show();
			$("#addCE").show();
		}else if(accion == 1){ // Visualizar
			$('.menuBotones[target="guardarSolicitud"]').hide();
			$("#s-ingresos .form-row").hide();
			$("#addCE").hide();
			$("#deleteAllIng").hide();
		}
		llenaCamposInfoGeneral(obj,accion);
		cargaObjetos(obj, accion);
		llenaSeccionComentarios(obj.comentarios);
		
		/*	
			Si solo puede visualizar sin proceder a validar
			se esconden todos los botones menos el de regresar
			y mostramos porcentaje dado que se tenga
		*/
		if(!fComun.getVarLocalJ("canAffect")){
			$('.menuBotones').hide();
			$('.menuBotones[target="regresarBusqSoli"]').show();
			$(".botonMasEsc").hide();
			$("#escenariosPF").find(".botonCalcEsc").hide();
		}else{ //si puede afectar mostramos boton de calculo y borramos porcentaje de escenarios
			$(".botonMasEsc").show();
			$("#escenariosPF").find(".botonCalcEsc").show();
			$(".porcFid").val("");
		}
	};
	
	/**
	 * Funcion que llena la informacion general de la solicitud de porcentaje.
	 * @param {Object} obj Parametro que contiene la informacion de la solicitud.
	 * @param {int} accion Parametro que contiene la accion con la que se desea tratar la informacion.
	 * @return {void}
	 * @method llenaCamposInfoGeneral
	 * @static
	 */
	const llenaCamposInfoGeneral = (obj, accion) => {
		let bloq = (accion == 1)?true:false;
		let elemts = ["tipoAcreditado", "calificacion", "selectAcreditado", "tipoSolicitud",
						"areaSoli", "oportSIBA", "activSIBA"]
		for(idx in elemts){
			$("#"+elemts[idx]).val(obj[elemts[idx]]).prop("disabled", bloq).trigger("change");
		}
		//Validamos campos de oportunidad y actividad siba para accion 2 y 3
		if(accion != 1)
			$("#"+elemts[3]).trigger("change");
	};
	
	/**
	 * Funcion que refresca las tablas principales y crea objetos necesarios.
	 * @param {Object} obj Parametro que contiene la informacion de la solicitud.
	 * @param {int} accion Parametro que contiene la accion con la que se desea tratar la informacion.
	 * @return {void}
	 * @method cargaObjetos
	 * @static
	 */
	const cargaObjetos = (obj, accion) => {
		registrosCE = obj.registrosCE;
		registrosIng = obj.registrosIng;
		fComun.refrescaTabla("#tablaCredEval",creaObjTablaCE());
		creaObjetoIngTable();
		creaEscenariosMasivos(obj,accion);
	};
	
	/**
	 * Funcion que se encarga de cargar los comentarios de la solicitud elegida.
	 * @param {Object} objCom Parametro que contiene la informacion de los comentarios de la solicitud procesada.
	 * @return {void}
	 * @method llenaSeccionComentarios
	 * @static
	 */
	const llenaSeccionComentarios = (objCom) => {
		//Se limpia primero sección de comentarios
		$("#seccionComentarios").html("");
		let showComment = false;
		for(i in objCom){
			showComment = true;
			let html = "<div class='toast' data-autohide='false' style='max-width: inherit !important'>"+
							"<div class='toast-header' style ='background-color: gainsboro !important'>"+
								"<strong class='mr-auto text-primary'>"+objCom[i].usuario+"</strong>"+
								"<small class='text-muted'>"+objCom[i].fecha+"</small>"+
							"</div>"+
							"<div class='toast-body'>"+
								objCom[i].comentario +
							"</div>"+
						"</div>";
			$("#seccionComentarios").append(html);
		}
		(showComment)?$('.toast').toast('show'):"";
	};
	
	/**
	 * Funcion que realiza el calculo de todos los escenarios presentes en la tabla de escenarios.
	 * @return {void}
	 * @method generaCalculoMasivo
	 * @static
	 */
	const generaCalculoMasivo = () => {
		let table = $('#escenariosPF').DataTable();
		let arrObjEsc = [];
		table.rows().every( function () {
			let tr = table.row(this).node();
			let numE = $(tr).find(".idEscenario").html();
			let objEsce = validaCamposEscenario(tr);
			objEsce.numEsc = numE;
			if(objEsce.calcular){ // Es posible realizar el calculo del escenario
				arrObjEsc.push(objEsce);
			}
		});
		if(arrObjEsc.length != 0){ //Se puede calcular algun escenario
			accionSolicitud(2,arrObjEsc,false);
		}else{ //ningun escenario se ha completado correctamente
			let textoTit = "Mensaje de error";
			let textoMsj = "Debes completar los campos necesarios en cada escenario, <br>" +
							"para poder realizar el c&aacute;lculo.";
			creaModalSuccesError(2,textoTit,textoMsj,false,"");
		}
	};
	
	/**
	 * Funcion que realiza la validacion de riesgo de la solicitud.
	 * @param {int} opc Parametro que indica si la solicitud debe ser procesada o solo se tiene que realizar la validacion.
	 * @return {void}
	 * @method validaSoliRiesgos
	 * @static
	 */
	const validaSoliRiesgos = (opc) =>{
		creaObjetoSolicitud(1);
		let idsEdos = fComun.getVarLocalJ("idsEstados");
		let idAcred = Number(String(objSolicitud["selectAcreditado"]).split("#@@#")[0])
		let validRiesg = false;
		let montoMaxRiesg = parseFloat(500*Math.pow(10,6));
		//Solicitudes que sean de gobierno estatales.
		if($.inArray(idAcred,idsEdos) != -1)
			validRiesg = true;
		for(idx in objSolicitud["registrosCE"]){
			let cred = objSolicitud["registrosCE"][idx];
			let montoCred = parseFloat(fComun.quitaFormato(cred[".montoCred"]));
			let esqAmort = Number(cred[".esqAmort"]);
			let tieneCobert = cred["#checkCob"];
			let tamIngMP = cred["dataTabIngMP"].length;
			//Solicitudes que tengan fuente de pago FAIS o FAFEF
			let fuentesPago = ['FAFEF', 'FAIS'];
			for(idx in cred["dataTabIngMP"]){
				let fPago = cred["dataTabIngMP"][idx][0];
				if(fuentesPago.includes(fPago))
					validRiesg = true;
			}
			let tipoProd = Number(cred[".tipoProducto"]);
			//Solicitudes que tengan creditos con esquemas especificos
			if(esqAmort == 6)
				validRiesg = true;
			//Solicitudes en las que se considera una cobertura de tasa de interes.
			if(tieneCobert)
				validRiesg = true;
			/*	
			 * Cuando para un credito se incluyan dos o mas de las siguientes fuentes de pago: Fondo General de Participaciones (FGP), Fondo de
			 * Fomento Municipal (FFM), Participaciones Federales (en este último se incluyen los otros fondos que no son FGP ni FFM).
			*/
			if(tamIngMP > 1)
				validRiesg = true;
			//Solicitudes que tengan creditos con tipo de producto Lineas de Credito en Cuenta Corriente
			if(tipoProd == 2)
				validRiesg = true;
			//Solo revisar si la variable validRiesg esta en false
			if(!validRiesg){
				for(llaveIng in objSolicitud["registrosIng"]){
					//Si ya fue true en algun punto salir del bucle
					if(validRiesg)
						break;
					let arrayIng = objSolicitud["registrosIng"][llaveIng];
					for(idx in arrayIng){
						let fuenteIng = String(arrayIng[idx][1]);
						fuenteIng =  fuenteIng.includes("Sistema");
						/*
						 	Solicitudes que tengan cambios en ingresos - Carga de ingresos realizadas por el Layout de Ingresos.
							y el monto del credito sea mayor a 500 mdp
						*/
						if(!fuenteIng && (montoCred > montoMaxRiesg)){
							validRiesg = true;
							break;
						}
					}
				}
			}
			//Si ya fue true en algun punto salir del bucle
			if(validRiesg)
				break;
		}
		//Validamos riesgo de historico con mas de 3 años y si todos los escenarios fueron completados
		let objEsc = objSolicitud["escenarios"];
		let mostrarAlert = false;
		if(objEsc.length > 0){
			for(idx in objEsc){
				let historico = Number(objEsc[idx]["historicoIng"]);
				//Si algun escenario esta incompleto mandar alerta
				if(!objEsc[idx]["calcular"]){
					mostrarAlert = true;
				}else{//Si se puede calcular pero no tiene el porcentaje mandar alerta
					let porcentaje = parseFloat(objEsc[idx]["porcFidei"]);
					if(isNaN(porcentaje))
						mostrarAlert = true;
				}
				//Solicitudes que hayan sido cargadas con mas de 3 anos de informacion historica de ingresos
				if(historico > 3)
					validRiesg = true;
			}
		}else //no tiene escenarios
			mostrarAlert = true;
		if(mostrarAlert){
			let textoTit = "Mensaje de alerta";
			let textoMsj = "Debes completar la secci&oacute;n de escenarios y realizar<br>" +
							"los c&aacute;lculos de &eacute;stos para poder procesar la solicitud.";
			creaModalSuccesError(2,textoTit,textoMsj,false,"");
		}else{//Se puede procesar informacion para cambio de estatus
			if(opc == 1){ //Procesar solicitud
				accionSolicitud(3,validRiesg);
			}else{ //Solo se solicito validacion de riesgo solicitud
				let textoTit = "Validaci&oacute;n de riesgo";
				let textoMsj = "La solicitud <strong>" + ((validRiesg)?"":"no ") + "cumple </strong> con alguna de las validaciones de riesgo,<br>" +
								"por lo cual <strong>"+((validRiesg)?"deber&aacute; ser validada por el &Aacute;rea de Riesgos.":"puede ser concluida.") + "</strong>";
				creaModalSuccesError(1,textoTit,textoMsj,false,"");
			}
		}
	};
	
	/**
	 * Funcion que se encarga de presentar un modal de alerta, para asegurar la accion solicitada de rechazo de la solicitud.
	 * @return {void}
	 * @method modalRechazoSoli
	 * @static
	 */
	const modalRechazoSoli = () => {
		$("#modalAlerta .textoBody").html("" +
				"Se procede a realizar el <strong>rechazo</strong> de la <br>" +
				"solicitud <strong>" + $("#numSolicitud").html() + "</strong> con estatus <strong>" + $("#estatusSoli").html() + "</strong>."+ 
				"<br><br>" +
				"<center>"+
					"<strong>&#191;Confirmas la petici&oacute;n&#63;</strong>" +
				"</center>"+
				"");
		$("#modalAlerta .modal-body .btn-secondary").attr('id','cerrarAlerta').html('Cancelar');
		$("#modalAlerta .modal-body .btn-warning").attr('id','rechazarSoli').html('<strong>Confirmar</strong>');
		$('#modalAlerta').modal('show');
		epf.eventoAlerta("#cerrarAlerta","#modalAlerta",0);
		epf.eventoAlerta("#rechazarSoli","#modalAlerta",1);
	};
	
	/**
	 * Funcion que muestra en un modal el detalle de un credito en la seccion de escenarios.
	 * @param {int} idCred Parametro que indica el indice del credito para obtener la informacion del credito en el objeto principal de creditos.
	 * @return {void}
	 * @method mostrarDetalleCred
	 * @static
	 */
	const mostrarDetalleCred = (idCred) => {	
		$('#modalDetCred .modal-dialog').addClass("ajustaModDetCred");
		let cred = registrosCE[idCred];
		let hasCob = cred["#checkCob"];
		let cobertura = (hasCob)?
							(
								"<br><strong>Plazo de la cobertura:</strong> " + cred[".plazoCobTas"] + " " +cred["nomPeriod"] +
								"<br><strong>Tasa fija de la cobertura:</strong> " + cred["#tasaFijaCob"] + "%" +
								"<br><strong>Porcentaje de la cobertura:</strong> " + cred["#porcentajeCobTasa"] + "%" 
							):"";
		let htmlDetCred = 
				"<strong>Monto del cr&eacute;dito:</strong> $" + fComun.moneyFormat(cred[".montoCred"],0) +
				"<br><strong>Plazo m&aacute;ximo:</strong> " + cred[".plazoMax"] + " " + cred["nomPeriod"] +
				"<br><strong>Moneda:</strong> " + cred[".monedaCEText"] +
				"<br><strong>Esquema de amortizaci&oacute;n:</strong> " + cred["esquema"] +
				"<br><strong>&#191;Cuenta con cobertura&#63;</strong> " + ((hasCob)?"Si":"No") +
				cobertura +
				"<br>";
		$("#modalDetCred .modal-title").html(cred[".nomFinanciaCorto"].replace("#@@#","_"));
		$("#modalDetCred .modal-body").html(htmlDetCred);
		$('#modalDetCred').modal('show');
	};
	
	
	/**
	 * Funcion que ayuda a generar el calculo masivo de solicitudes de porcentaje a fideicomitir.
	 * @param {Object} param Parametro que contiene la informacion necesaria para poder consultar los calculos masivos.
	 * @return {void}
	 * @method calculoMasivoPF
	 * @static
	 */
	const calculoMasivoPF = (param) => {
		fComun.postSendFileDownloadFile("/calculoMasSolRF/", param);
	};
	
	/**
	 * Funcion que ayuda a cancelar una solicitud que ya no se requiere en el sistema de porcentaje a fideicomitir, la cual solo 
	 * puede ser cancelada por un usuario con rol de validador y que la solicitud pertenezca a su area. 
	 * @return {void}
	 * @method realizaCancelacionSolicitud
	 * @static
	 */
	const realizaCancelacionSolicitud = () => {
		let param = {
			numSoli: $("#numSolicitud").html(),
			estatus: $("#idES").html(),
			rol: $("#rol").html(),
			usuario: $("#usuario").html(),
			token: $("#token").html(),
			comentario: $("#razonCS").val()
		};
		fComun.post2("/cancelarSolicitudPF/", param, function(resp){
			try{
				let obj = resp;
				if(obj.resp == 200){
					let modalAprob = "#modalAprobSoliEstatus";
					let msjConfirm = "La solicitud ha sido cancelada correctamente.";
					$(modalAprob+" .textoBody").html(msjConfirm);
					$(modalAprob).modal('show');
					epf.eventoAprobSoli(".cierraModalAprob", modalAprob);
				}else{
					$("#modalRespGuardar .modal-title").html("Mensaje de error");
					$("#modalRespGuardar .modal-header").removeClass("headerModalSucess");
					$("#modalRespGuardar .modal-header").addClass("headerModalError");
					$("#modalRespGuardar .textoBody").html("" +
							"No fue posible cancelar la solicitud.<br>" +
							"<strong>Avisa al &aacute;rea de sistemas de la DGAAR</strong>" +
							"");
					$("#modalRespGuardar .modal-body button").attr('class','btn btn-danger');
					$("#modalRespGuardar .modal-body button").attr('id','cerrarModalGuardado');
					$('#modalRespGuardar').modal('show');
				}
			}catch(e){console.log(e)}
		});
	};
	
	/**
	 * Funcion que ayuda a cargar los creditos a evaluar de manera masiva al sistema de porcentaje a fideicomitir.
	 * @param {FormData} objFD Parametro que contiene el layout de carga de creditos a evaluar. 
	 * @return {void}
	 * @method realizaCargaMasivaCreditos
	 * @static
	 */
	const realizaCargaMasivaCreditos = (objFD) => {
		fComun.postFile("/cargaCredEvMas/", objFD, function(resp){
			try{
				let obj = resp;
				if(obj.estatus == 200){
					let table = $("#tablaCredEval").DataTable();
					registrosCE = obj.registrosCE;
					fComun.refrescaTabla("#tablaCredEval", creaObjTablaCE());
					fComun.mostrarEspera();
					table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
						let registro = this.node();
						let nodoBotEdit = $(registro).find(".editCE");
						fcs.realizaAccionRegCE(nodoBotEdit, 2);
						fcs.guardaRegistroCE(2);
					});
					actualizaCamposEscenario(1);
					fComun.refrescaTabla("#tablaCredEval", creaObjTablaCE());
					fComun.ocultarEspera();
					let textoTit = "Carga exitosa";
					let textoMsj = "Se ha realizado la carga de cr&eacute;ditos de manera satisfactoria.";
					creaModalSuccesError(1, textoTit, textoMsj, false, "");
				}else{
					let textoTit = "Mensaje de error";
					let textoMsj = obj.mensaje;
					creaModalSuccesError(2, textoTit, textoMsj, false, "");
				}
			}catch(e){console.log(e)}
		});
	};
	
	/**
	 * Funcion que ayuda a validar que ya se tengan los ingresos completos para entrar
	 * a seccion de creditos a evaluar.
	 * @return {void}
	 * @method validaCargaCompIngresos
	 * @static
	 */
	const validaCargaCompIngresos = () => {
		let mostrarCE = false;
		for(j in tipoIngCompletos){
			if(Number(tipoIngCompletos[j]) >= 36) mostrarCE = true; 
		}
		//Si aun no tengo al menos un ingreso completo, no mostrar seccion de creditos a evaluar
		if(mostrarCE == false){
			let textoTit = "Mensaje de error";
			let textoMsj = "No es posible realizar la carga de cr&eacute;ditos a evaluar, <br>" +
							"ya que a&uacute;n no se ha completado la secci&oacute;n de <strong>Ingresos</strong>.";
			let accionF = () => $("#s-ingresos-tab").trigger("click");
			creaModalSuccesError(2, textoTit, textoMsj, true, accionF, 0);
		}
	};
	
	/**
	 * Funcion que ayuda crear un escenario por cada credito completado.
	 * a seccion de creditos a evaluar.
	 * @return {void}
	 * @method creaEscenarioXCreditoComp
	 * @static
	 */
	const creaEscenarioXCreditoComp = () => {
		$("#modalAlerta").modal('hide');
		fComun.mostrarEspera();
		let escenariosDT = $("#escenariosPF").DataTable();
		escenariosDT.clear().draw();
		let objEscXCred = [];
		for(i in registrosCE){
			if(registrosCE[i]["estatus"]){
				let dataMP = registrosCE[i]["dataTabIngMP"];
				let opcIng = []
				for(j in dataMP){
					opcIng.push({
						"tipoIng": dataMP[j][0], "tipoCalc": "2", "porcentaje": ""
					});
				}
				objEscXCred.push(
						{	
							"creditos":  [{"idxCred": i, "tipoCalc": "1"}],
							"historicoIng": "3",
							"ingresos": opcIng
						}
				);
			}
		}
		creaEscenariosMasivos({"escenarios": objEscXCred}, 2);
		fComun.ocultarEspera();
		let textoTit = "Carga exitosa";
		let textoMsj = "Se ha realizado la creaci&oacute;n de escenarios de manera satisfactoria.";
		creaModalSuccesError(1, textoTit, textoMsj, false, "");
	};
	
	/**
	 * Funcion que crea los escenarios de la solicitud que esta siendo procesada y se trata informacion de acuerdo a la accion deseada por el usuario.
	 * @param {Object} obj Parametro que contiene la informacion de la solicitud.
	 * @param {int} accion Parametro que contiene la accion con la que se desea tratar la informacion.
	 * @return {void}
	 * @method creaEscenariosMasivos
	 * @static
	 */
	const creaEscenariosMasivos = (obj, accion) => {
		let table = $("#escenariosPF").DataTable();
		let esc = obj.escenarios;
		let objC = fComun.getVarLocalJ("catalogos");
		//Creamos escenarios
		let objEscenarios = []
		for(idx in esc){
			//Creamos los creditos
			let htmlCreditos = "";
			for(idx2 in esc[idx].creditos){
				htmlCreditos += "<tr>" +
									"<td><select class='custom-select opcCredEsc'></select></td>"+
									"<td><select class='custom-select tipoCalcMont'></select></td>"+
									"<td><button class='btn btn-primary btn-sm viewDataCred' type='button'>Ver detalle</button></td>"+
								"</tr>";
			}
			//Creamos los ingresos
			let htmlIngresos = "";
			for(idx2 in esc[idx].ingresos){
				htmlIngresos += "<tr>" +
									"<td><select class='custom-select opcIngEsc'></select></td>"+
									"<td><select class='custom-select tipoCalcIng'></select></td>"+
									"<td>" +
										"<div class='input-group'>" +
											"<input type='text' class='form-control porcFid' style='text-align: right; width: 80px; height: 28px;' aria-label='Small' aria-describedby='inputGroup-sizing-sm' readonly>" +
											"<div class='input-group-append' style = 'height: 28px;'>" +
										    	"<span class='input-group-text'><strong>% </strong> <span class='iconOKC' style='padding-left: 5px;'></span></span>" +
										    "</div>" +
										"</div>" +
									"</td>"+
									"<td><span class='deleteEscIng text-danger px-2 puntero'><i class='fa fa-trash'></i></span></td>"+
									"<td class='esconder'></td>"+
								"</tr>";
			}
			//Creamos escenarios con creditos, ingresos e historia ing
			let htmlCred = "<table class='tablaEscCred table'>" +
								"<thead>" +
									"<tr>" +
										"<th class='centrar'>" +
											"Cr&eacute;dito " +
											"<strong style='font-size: 20px; color=#007bff' class='addRowEscCred puntero'><i class='fa fa-plus-circle'></i></strong>" +
										"</th>" +
										"<th class='centrar'>Tipo c&aacute;lculo</th>" +
										"<th class='centrar'></th>" +
									"</tr>" +
								"</thead>" +
								"<tbody>" +
									htmlCreditos +
								"</tbody>" +
							"</table>";
			let htmlIng = "<table class='tablaEscIng table'>" +
								"<thead>" +
									"<tr>" +
										"<th class='centrar'>" +
											"Ingresos " +
											"<strong style='font-size: 20px; color=#007bff' class='addRowEscIng puntero'><i class='fa fa-plus-circle'></i></strong>"+
										"</th>" +
										"<th class='centrar'>Tipo c&aacute;lculo</th>" +
										"<th class='centrar'>% fideicomitir</th>" +
										"<th class='esconder'></th>" +
									"</tr>" +
								"</thead>" +
								"<tbody>" +
									htmlIngresos +
								"</tbody>" +
							"</table>";
			let htmlNumAnIng =  "<select class='ingHistorico' style='width: 100px' disabled>" +
									"<option value='3' selected>3 a&ntilde;os</option>"
								"</select>";
			objEscenarios.push([
	            'Escenario X',
	            htmlCred,
	            htmlIng,
	            htmlNumAnIng
	        ]);
		}
		fComun.refrescaTabla("#escenariosPF", objEscenarios);
		epf.creaEventosEscenario();
		//Creamos opciones a select en la seccion de creditos
		let opcSelCred = [];
		let opcSelTCM = [];
		opcSelCred.push({id: -1, text: "Elige uno"});
		for(i in registrosCE){
			if(registrosCE[i]["estatus"]){
				let nomCred = registrosCE[i][".nomFinanciaCorto"].replace("#@@#","_");
				opcSelCred.push({id: registrosCE[i]["NoReg"], text: nomCred});
			}
		}
		fl.select2(".opcCredEsc", opcSelCred, -1);
		$(".opcCredEsc").val(-1).trigger("select2:select");
		$(".opcCredEsc").next().css("width", "200px");
		for(values in objC.ctlgTCM){
			opcSelTCM.push({id: objC.ctlgTCM[values][0], text: objC.ctlgTCM[values][1]})
		}
		fl.select2(".tipoCalcMont", opcSelTCM, -1);
		$(".tipoCalcMont").val(1).trigger("change").prop("disabled",true);
		$(".tipoCalcMont").next().css("width", "166px");
		//Creamos opciones a select en la seccion de ingresos
		let opcSelIng = [];
		let opcSelTCI = [];
		opcSelIng.push({id: -1, text: "Elige uno"});
		for(tipoIng in tipoIngCompletos){
			opcSelIng.push({id: tipoIng, text: tipoIng});	
		}
		fl.select2(".opcIngEsc", opcSelIng, -1);
		$(".opcIngEsc").val(-1).trigger("change");
		$(".opcIngEsc").next().css("width", "120px");
		for(values in objC.ctlgTCI){
			opcSelTCI.push({id: objC.ctlgTCI[values][0], text: objC.ctlgTCI[values][1]})
		}
		fl.select2(".tipoCalcIng", opcSelTCI, -1);
		$(".tipoCalcIng").val(2).trigger("change").prop("disabled",true);
		$(".tipoCalcIng").next().css("width", "145px");
		epf.actualizaTablaEscenarios();
		epf.creaEventosEscenario();
		epf.eventoCalculo();
		//Ahora asignamos valores a los escenarios
		let bloquear = (accion == 1)?true:false;
		for(idx in esc){
			let nodoTC = table.cell(idx,1).nodes();
			let nodoTI = table.cell(idx,2).nodes();
			let nodoHI = table.cell(idx,3).nodes();
			//asignamos valores a creditos
			for(idx2 in esc[idx].creditos){
				let elemCred = $(nodoTC).find(".opcCredEsc");
				let valorCred = String(esc[idx].creditos[idx2].idxCred);
				$(elemCred).eq(idx2).val(valorCred).prop("disabled",bloquear).trigger("change");
			}
			//asignamos valores a ingresos
			for(idx2 in esc[idx].ingresos){
				let elemIng = $(nodoTI).find(".opcIngEsc");
				let tipoIng = String(esc[idx].ingresos[idx2].tipoIng);
				let porcentaje = String(esc[idx].ingresos[idx2].porcentaje);
				$(elemIng).eq(idx2).val(tipoIng).prop("disabled",bloquear).trigger("select2:select").trigger("change");
				elemIng = $(nodoTI).find(".porcFid");
				$(elemIng).eq(idx2).val(porcentaje);
			}
			let valHisIng = String(esc[idx].historicoIng);
			let rol = Number($("#rol").html());
			bloquearHI = (rol < 12 || rol > 13)? true:bloquear;
			$(nodoHI).find(".ingHistorico").val(valHisIng).prop("disabled",bloquearHI).trigger("change");
		}
	};
	
	/**
	 * Funcion que ayuda descargar un archivo excel con los porcentajes a fideicomitir de cada escenario.
	 * @return {void}
	 * @method descargaExcelconPF
	 * @static
	 */
	const descargaExcelconPF = () => {
		let table = $("#escenariosPF").DataTable();
		let datosPF = []
		table.rows().every( function ( rowIdx, tableLoop, rowLoop ) {
			let registro = this.node();
			let valPF = $(registro).find(".porcFid").val();
			let valCred = $(registro).find(".opcCredEsc").val();
			let nomCred = registrosCE[valCred][".nomFinanciaCorto"].replace("#@@#","_");
			datosPF.push([nomCred, valPF]);
		});
		let param = {
				datos: datosPF,
				solicitud: $("#numSolicitud").html()
		};
		fComun.postFileDownload("/descargaMasResultados/", param, function(resp){
			try{
				
			}catch(e){
				$("#modalRespGuardar .modal-title").html("Mensaje de error");
				$("#modalRespGuardar .modal-header").removeClass("headerModalSucess");
				$("#modalRespGuardar .modal-header").addClass("headerModalError");
				$("#modalRespGuardar .textoBody").html("" +
						"No fue posible procesar la solicitud.<br>" +
						"<strong>Avisa al &aacute;rea de sistemas de la DGAAR</strong>" +
						"");
				$("#modalRespGuardar .modal-body button").attr('class','btn btn-danger');
				$("#modalRespGuardar .modal-body button").attr('id','cerrarModalGuardado');
				$('#modalRespGuardar').modal('show');
			}
		});
	};
	
	return{
		cargaCatalogos:	cargaCatalogos,
		actualizaEsquemas:	actualizaEsquemas,
		actualizaTipoTasa:	actualizaTipoTasa,
		setLimitesPlazos:	setLimitesPlazos,
		actualizaNombreCorto:	actualizaNombreCorto,
		cargaInfoInicialCred:	cargaInfoInicialCred,
		cargaDatosExcel:	cargaDatosExcel,
		showTableEE:	showTableEE,
		cssVistaCaptura:	cssVistaCaptura,
		validaCamposObliCredEval:	validaCamposObliCredEval,
		guardaRegistroCE:	guardaRegistroCE,
		recargaTablaCredEval:	recargaTablaCredEval,
		realizaAccionRegCE:	realizaAccionRegCE,
		cargaIngDesdeBD:	cargaIngDesdeBD,
		realizaAccionRegIng:	realizaAccionRegIng,
		creaEscenario:	creaEscenario,
		realizaAccionEscenario:	realizaAccionEscenario,
		realizaAccionEscTIng:	realizaAccionEscTIng,
		realizaAccionEscTCred:	realizaAccionEscTCred,
		validaMsjIngreAcred:	validaMsjIngreAcred,
		creaModalAlerta:	creaModalAlerta,
		creaRelIngCred:	creaRelIngCred,
		validaSEscen:	validaSEscen,
		validaCargaIngSelec:	validaCargaIngSelec,
		validaInfoIngresos:	validaInfoIngresos,
		validaOpcHistIng: validaOpcHistIng,
		cssVistaEscenario:	cssVistaEscenario,
		accionSolicitud:	accionSolicitud,
		cargaSolicitudAccion:	cargaSolicitudAccion,
		validarBotonesCambioEstatus:	validarBotonesCambioEstatus,
		pintaRespuestaCalculo:	pintaRespuestaCalculo,
		generaCalculoMasivo: 	generaCalculoMasivo,
		validaSoliRiesgos:	validaSoliRiesgos,
		modalRechazoSoli:	modalRechazoSoli,
		mostrarDetalleCred:	mostrarDetalleCred,
		creaModalSuccesError: creaModalSuccesError,
		calculoMasivoPF:	calculoMasivoPF,
		realizaCancelacionSolicitud:	realizaCancelacionSolicitud,
		realizaCargaMasivaCreditos:	realizaCargaMasivaCreditos,
		validaCargaCompIngresos:	validaCargaCompIngresos,
		creaEscenarioXCreditoComp:	creaEscenarioXCreditoComp,
		descargaExcelconPF:	descargaExcelconPF,
		iniciaSelectDeudor:	iniciaSelectDeudor
	}
}();