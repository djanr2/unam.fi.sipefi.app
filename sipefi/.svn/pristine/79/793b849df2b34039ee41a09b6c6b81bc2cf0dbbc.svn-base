from sipefi_apps.principal.modelo.ConexionBD import ConexionBD as ConBD

class ConsultasBD():
        """
            Clase que nos apoya con la interaccion entre el servidor y la base de datos.
        """
        
        def __init__(self):
            """
                Funcion que ayuda a inicializar parametros y valores necesarios para las consultas SQL.
            """
            self.rol = ""
            self.idUniverso = ""
            
        def subConsultaRechazo(self, universo, valTS):
            """
                Funcion que nos ayuda a crear una subconsulta sql para obtener las solicitudes que han sido rechazadas.
                
                :param universo: Parametro que indica el proyecto en el que se esta trabajando (1 - cpr, 2 - pf, 4 - cef).
                :param valTS: Parametro que indica el tipo de solicitud.
                
                :return: Regresa un String con la subconsulta sql.
            """
            extraCond = ""
            if int(universo) == 4:
                extraCond = "and a.id_tipo_solicitud = '" + str(valTS) + "'"
            sql = """
                    select a.id_solicitud_prima, 'Rechazada' estatus, a.busuario, a.bfecha
                    from PRIMAS.TD_HISTORIA_SOLICITUD a 
                    where a.bfecha = (
                            select max(b.bfecha) from PRIMAS.TD_HISTORIA_SOLICITUD b
                            where 
                                a.ID_SOLICITUD_PRIMA = b.ID_SOLICITUD_PRIMA
                            group by b.ID_SOLICITUD_PRIMA
                    ) and (a.estatus_origen - a.estatus_destino) > 0
                    and a.estatus_destino not in (4, 17)
                    and a.ID_UNIVERSO = '"""+str(universo)+"""'
                    """ + extraCond + """
            """
            return sql
        
        def dameTablasColumnXUniverso(self, universo):
            """
                Funcion que nos ayuda a obtener las columnas a usar en las querys de acuerdo al sistema 
                que se este usando.
                
                :param universo: Parametro que indica el sistema que se esta usando.
                
                :return: Regresa lista de nombres de columnas a usar para querys. 
            """
            if universo: #Primas
                return ("PRIMAS.TD_CPR_SOLICITUD_PRIMA", "primas.td_cpr_acreditado",
                        "id_solicitud_prima","id_bp","id_bp","nom_acreditado","'CPR-'")
            else: #RF
                return ("PFIDEICOMITIR.TD_PF_SOLICITUD_PFIDEICOMITIR", "CATALOGO.TC_ESTADO_MUNICIPIO",
                        "id_solicitud_pf","id_acreditado","CLAVE_EDO_MUN","EDO_MUNICIPIO","'PRF-'")
                    
        def buscaSolicitud(self, numSoli, universo):
            """
                Funcion que apoya en obtener la informacion de alguna solicitud en especifico.
                
                :param numSoli: Parametro que indica el identificador de la solicitud.
                :param universo: Parametro que indica el sistema donde se esta trabajando.
                
                :return: Regresa objeto con estructura JSON con la informacion de la solicitud que se busco.
            """
            cursor = ConBD().cursorBDR()
            subQueryR = self.subConsultaRechazo(universo, "")
            universo = True if int(universo) == 1 else False
            tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo = self.dameTablasColumnXUniverso(universo)
            sql = """
                    SELECT """+prefijo+"""||a."""+colum1+""", a.busuario, c."""+colum4+""" ,a.num_escenarios, 
                    case when d.estatus is not null then d.estatus else b.desc_estatus end, 
                    a."""+colum1+"""||'#@@#'||a.id_estatus_solicitud||'#@@#'||a."""+colum2+"""||'#@@#'||c."""+colum4+"""||'#@@#'||a.busuario
                    from """+tablaSoli+""" a inner join catalogo.TC_ESTATUS_SOLICITUD b 
                    on a.id_estatus_solicitud = b.id_estatus_solicitud
                    inner join """+tablaAcred+""" c on a."""+colum2+""" = c."""+colum3+"""
                    left join ("""+subQueryR+""") d on a."""+colum1+""" = d.ID_SOLICITUD_PRIMA
                    where a."""+colum1+""" = '"""+str(numSoli)+"""' 
                    and a.id_estatus_solicitud = (select max(e.id_estatus_solicitud) 
                                                  from """+tablaSoli+""" e 
                                                  where e."""+colum1+""" = '"""+str(numSoli)+"""'
                                                  and e.historica = 0
                                                  group by e."""+colum1+""")
            """
            try:
                data = cursor.execute(sql)
                res = [app for app in data]
                res = {'respS': res,
                       'estatus': 200 if len(res) >= 1 else 204 }
            finally:
                cursor.close()
            return res
            
        def buscaSolicitudesUsuario(self, usuario, rol, universo):
            """
                Funcion que busca todas las solicitudes pendientes de concluir por el usuario logueado.
                
                :param usuario: Usuario logueado.
                :param rol: Rol del usuario logueado.
                :param universo: Id del proyecto que se esta trabajando (CPR o PF).
                
                :return: Objeto que contiene la informacion de las solicitudes procesadas por el usuario logueado.  
            """
            cursor = ConBD().cursorBDR()
            idUniverso = universo
            subQueryR = self.subConsultaRechazo(universo, "")
            universo = True if int(universo) == 1 else False
            tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo = self.dameTablasColumnXUniverso(universo)
            idsV = self.buscaRolXNombre("Validador")
            rol = int(rol)
            estatus = (3 if rol == 13 else 2) if rol in idsV else 1
            sqlExtra = ""
            estatusExtra = ""
            if rol in idsV:
                sqlExtra = """ 
                            a."""+colum1+""" not in 
                            (select distinct """+colum1+""" 
                                from """+tablaSoli+""" 
                                where busuario = '"""+usuario+"""' and historica = 1
                            )
                """
                if(rol == 10 and int(idUniverso) == 1): #solo validadores GEM para primas
                    sqlExtra += """
                                    and a.id_perfil = """+str(rol)+"""
                                """
                
            else:
                sqlExtra = " a.busuario = '"+usuario+"'"
            #estatus extra para rol PF y solo sistema primas
            if rol == 15 and int(idUniverso) == 1:
                estatusExtra = ",5" 
            sqlCons = """
                        SELECT """+prefijo+"""||a."""+colum1+""", c."""+colum4+""", a.num_escenarios,
                            case when d.estatus is not null then d.estatus else b.desc_estatus end, 
                            (select busuario from """+tablaSoli+""" e 
                                    where e."""+colum1+""" = a."""+colum1+""" and e.id_estatus_solicitud = 1) usu_crea,
                            (select busuario from """+tablaSoli+""" e 
                                    where e."""+colum1+""" = a."""+colum1+""" and e.id_estatus_solicitud = a.id_estatus_solicitud) usu_mod,
                            TO_CHAR((select bfecha from """+tablaSoli+""" e 
                                    where e."""+colum1+""" = a."""+colum1+""" and e.id_estatus_solicitud = a.id_estatus_solicitud),'dd/mm/yyyy') fecha_mod,
                            '', a."""+colum1+"""||'#@@#'||a.id_estatus_solicitud||'#@@#'||a."""+colum2+"""||'#@@#'||
                            c."""+colum4+"""||'#@@#'||a.busuario||'#@@#'||a.historica||'#@@#'||a.id_perfil
                        from """+tablaSoli+""" a inner join catalogo.TC_ESTATUS_SOLICITUD b 
                        on a.id_estatus_solicitud = b.id_estatus_solicitud
                        inner join """+tablaAcred+""" c on a."""+colum2+""" = c."""+colum3+"""
                        left join ("""+subQueryR+""") d on a."""+colum1+""" = d.ID_SOLICITUD_PRIMA
                        where a.historica = 0 and a.id_estatus_solicitud in ("""+str(estatus) + estatusExtra +""") and """+sqlExtra+"""
                        order by a."""+colum1+""" desc
            """
            try:
                data = cursor.execute(sqlCons)
                res = [app for app in data]
                res2 = self.buscaSolicitudesAvanzadas(usuario, estatus, tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo)
                res3 = self.buscaSolicitudesRecientes(usuario, estatus, tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo, subQueryR, rol)
                respTotal = {'TSU': res,
                             'estatusTSU': 200 if len(res) >= 1 else 204 ,
                             'TSA': res2,
                             'estatusTSA': 200 if len(res2) >= 1 else 204,
                             'TSR': res3,
                             'estatusTSR': 200 if len(res3) >= 1 else 204,
                             'catalogos': self.dameCatalogosIni(rol,idUniverso)
                             }
            finally:
                cursor.close()
            return respTotal
        
        def buscaSolicitudesAvanzadas(self, usuario, estatus, tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo):
            """
                Funcion que busca todas las solicitudes en las que ha participado el usuario logueado.
                
                :param usuario: Usuario logueado.
                :param estatus: Estatus de solicitud que no debe ser considerado en la busqueda de solicitudes.
                :param tablaSoli: Nombre de la tabla donde se buscaran las solicitudes en base de datos.
                :param tablaAcred: Nombre de la tabla donde se buscaran a los acreditados.
                :param colum1: Nombre de la columna que contiene el numero de solicitud.
                :param colum2: Nombre de la columna que contiene el numero de acreditado.
                :param colum3: Nombre de la columna que contiene el numero de acreditado en tabla especifica.
                :param colum4: Nombre de la columna que contiene el nombre del acreditado.
                :param prefijo: Prefijo a concatener con el numero de solicitud.
                
                :return: Regresa el objeto con la informacion de las solicitudes donde el usuario ha participado.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                            select """+prefijo+"""||g."""+colum1+""", g."""+colum4+""", g.num_escenarios, g.desc_estatus, g.usu_crea, g.usu_mod, TO_CHAR(fecha_mod,'dd/mm/yy'), '<select class="accionSolicitud" id="numS'||g."""+colum1+"""||'"></select>',
                                (select LISTAGG(g."""+colum1+"""||'-'||a.id_estatus_solicitud||'||'||b.desc_estatus, '#@@#') WITHIN GROUP (ORDER BY a.id_estatus_solicitud) AS estatus 
                                    from """+tablaSoli+""" a
                                    inner join CATALOGO.TC_ESTATUS_SOLICITUD b
                                    on a.id_estatus_solicitud = b.id_estatus_solicitud
                                    where a."""+colum1+""" = g."""+colum1+""" group by a."""+colum1+"""
                                ) estatus
                            from (
                                select distinct 
                                    a."""+colum1+""", b."""+colum4+""", e.desc_estatus, e.id_estatus_solicitud, a.num_escenarios,
                                    (select busuario from """+tablaSoli+""" f 
                                        where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = 1) usu_crea,
                                    (select busuario from """+tablaSoli+""" f 
                                        where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = d.id_estatus) usu_mod,
                                    (select bfecha from """+tablaSoli+""" f 
                                        where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = d.id_estatus) fecha_mod
                                from """+tablaSoli+""" a
                                inner join """+tablaAcred+""" b on a."""+colum2+""" = b."""+colum3+"""
                                inner join (
                                    select c."""+colum1+""", max(c.id_estatus_solicitud) id_estatus
                                    from """+tablaSoli+""" c 
                                    where c.historica = 0 group by c."""+colum1+"""
                                ) d
                                on d."""+colum1+""" = a."""+colum1+"""
                                inner join CATALOGO.TC_ESTATUS_SOLICITUD e
                                on d.id_estatus = e.id_estatus_solicitud
                                where a.busuario = '"""+usuario+"""'
                            ) g where g.id_estatus_solicitud != """+str(estatus)+""" 
                            order by g."""+colum1+""" desc
                """)
                res = [app for app in data]
            finally:
                cursor.close()
            return res
        
        def buscaSolicitudesRecientes(self, usuario, estatus, tablaSoli, tablaAcred, colum1, colum2, colum3, colum4, prefijo, subQueryR, rol):
            """
                Funcion que busca todas las solicitudes que han sido procesadas por usuarios diferentes al usuario logueado.
                
                :param usuario: Usuario logueado.
                :param tablaSoli: Nombre de la tabla donde se buscaran las solicitudes en base de datos.
                :param tablaAcred: Nombre de la tabla donde se buscaran a los acreditados.
                :param colum1: Nombre de la columna que contiene el numero de solicitud.
                :param colum2: Nombre de la columna que contiene el numero de acreditado.
                :param colum3: Nombre de la columna que contiene el numero de acreditado en tabla especifica.
                :param colum4: Nombre de la columna que contiene el nombre del acreditado.
                :param prefijo: Prefijo a concatener con el numero de solicitud.
                :param subQueryR: Subquery que debe ser agregada al query de consulta.
                :param rol: Rol del usuario logueado.
                
                :return: Regresa el objeto con la informacion de las solicitudes que han sido procesadas por usuarios diferentes al usuario logueado.
            """
            #Solo si el rol no pertenece a un rol de riesgos, aplicar la condicion
            #12 - Operador riesgos, 13 - Validador riesgos
            condicionExtra = ""
            if int(rol) not in (12, 13):
                condicionExtra = " and a.id_perfil not in (12, 13) "
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                    SELECT """+prefijo+"""||a."""+colum1+""", c."""+colum4+""", a.num_escenarios,
                        case when d.estatus is not null then d.estatus else b.desc_estatus end,
                        (select busuario from """+tablaSoli+""" f 
                                where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = 1) usu_crea,
                        (select busuario from """+tablaSoli+""" f 
                                where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = a.id_estatus_solicitud) usu_mod,
                        TO_CHAR((select bfecha from """+tablaSoli+""" f 
                                where f."""+colum1+""" = a."""+colum1+""" and f.id_estatus_solicitud = a.id_estatus_solicitud),'dd/mm/yyyy') fecha_mod,
                        '', a."""+colum1+"""||'#@@#'||a.id_estatus_solicitud||'#@@#'||a."""+colum2+"""||'#@@#'||
                        c."""+colum4+"""||'#@@#'||a.busuario||'#@@#'||a.historica
                    from """+tablaSoli+""" a inner join catalogo.TC_ESTATUS_SOLICITUD b 
                    on a.id_estatus_solicitud = b.id_estatus_solicitud
                    inner join """+tablaAcred+""" c on a."""+colum2+""" = c."""+colum3+"""
                    left join ("""+subQueryR+""") d on a."""+colum1+""" = d.ID_SOLICITUD_PRIMA
                    where a.historica = 0 and a.id_estatus_solicitud >= """+str(estatus)+""" and 
                    a."""+colum1+""" not in 
                                (select distinct """+colum1+""" 
                                    from """+tablaSoli+""" 
                                    where busuario = '"""+usuario+"""'
                                )
                    """ + condicionExtra + """
                    order by a."""+colum1+""" desc
                """)
                res = [app for app in data]
            finally:
                cursor.close()
            return res
        
        def validaTokenAcceso(self, token, universo):
            """
                Funcion que valida el token de acceso del usuario al sistema que desea ingresar.
                
                :param token: Numero de token que se desea validar para el acceso al sistema.
                :param universo: Identificador del sistema donde se esta trabajando.
                
                :return: Regresa objeto con el estatus del acceso.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                   select a.num_token, a.usuario, a.rol_usuario
                   from parametro.TP_TOKEN a
                   where a.estatus = 'E' and a.num_token = '"""+str(token)+"""' and 
                       ((sysdate - a.fecha_hora_emision)*24*60*60) 
                        <= (select valor from parametro.tc_parametros b where b.parametro = 'DURACION_TOKEN')
                        and a.rol_usuario in 
                            (select c.nombre_perfil from catalogo.TC_PERFILES c
                                where c.activo = '0' and sistema = 'SIAR' 
                                    and (c.universo like '%"""+str(universo)+"""%' or c.universo = '0')
                            )
                """)
                resp = [app for app in data]
                url = self.getUrlBadAccess()
                resp = {#'acceso': resp,
                        #'estatus': 200 if len(resp) >= 1 else 204,
                        #'acceso': [["","usrsupervisor","ADMINISTRADOR"]],
                        #'acceso': [["","operadorPF","EADMR_MRLC"]],
                        #'acceso': [["","operadorRiesgos","EADMR_MRLC"]],
                        #'acceso': [["","usrsupergemQA","EADMR_MRLC"]],
                        #'acceso': [["","usroperadorQA","EADMR_MRLC"]],
                        'acceso': [["","operadorGEM","EADMR_MRLC"]],
                        #'acceso': [["","usropergemQA","EADMR_MRLC"]],
                        #'acceso': [["","validadorGEM","EADMR_MRLC"]],
                        #'acceso': [["","dsanchlu","ADMINISTRADOR"]],
                        #'acceso': [["","usrmadm","ADMINISTRADOR"]],
                        #'acceso': [["","validadorPF","EADMR_MRLC"]],
                        #'acceso': [["","validadorRiesgos","EADMR_MRLC"]],
                        #'acceso': [["","jmayaarr","ADMINISTRADOR"]],
                        #'acceso': [["","MesaControl","ADMINISTRADOR"]],
                        #'acceso': [["","usrsupergem","ADMINISTRADOR"]],
                        #'acceso': [["","usrmadm","ADMINISTRADOR"]],
                        'estatus': 200,
                        'badAccess': url[0][0]
                        }
            finally:
                cursor.close()
            return resp
        
        def mapeoRolUsuario(self, rol, universo):
            """
                Funcion que ayuda a obtener todos los perfiles validos que tiene el usuario logueado, dado el
                caso que pueda fungir con mas de un perfil en el sistema logueado.
                
                :param rol: Rol del usuario logueado.
                :param universo: Identificador del sistema donde se esta trabajando.
                
                :return: Regresa objeto con el o los roles que puede tener el usuario en el sistema logueado.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                    select c.id_perfil, c.nombre_perfil
                    from catalogo.TC_PERFILES a
                        inner join catalogo.TC_MAPEO_PERFILES b 
                            on a.id_perfil = b.id_perfil_origen 
                        inner join catalogo.TC_PERFILES c
                            on b.id_perfil_destino = c.id_perfil
                    where a.nombre_perfil = '"""+str(rol)+"""' 
                    and a.activo = '0' and c.activo = '0' 
                    and (c.universo like '%"""+str(universo)+"""%' or c.universo = '0')
                    order by 2
                """)
                resp = [{"id": app[0], "rol": app[1]} for app in data]
                resp = {"resp": resp,
                        "estatus": 200 if len(resp) >= 1 else 204
                        }
            finally:
                cursor.close()
            return resp
    
        def getUrlBadAccess(self):
            """
                Funcion que obtiene la url de error dado el caso en el que no se tenga acceso al sistema.
                
                :return: Regresa string con la url de error.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                    select valor from parametro.tc_parametros 
                    where parametro = 'URL_SIAR2019'
                """)
                resp = [app for app in data]
            finally:
                cursor.close()
            return resp
    
        def quemaTokenAcceso(self, token):
            """
                Funcion que ayuda a dejar inhabilitado el token de acceso del usuario, una vez que se ha usado.
                
                :param token: Parametro que contiene el token de acceso al sistema del usuario.
            """
            cursor = ConBD().cursorBDR()
            try:
                cursor.execute("""
                   update parametro.TP_TOKEN set estatus = 'A'
                   where estatus = 'E' and num_token = '"""+token+"""'
                """)
            finally:
                cursor.close()
            
        def cierraSesionUsuario(self, token, usuario, opcion):
            """
                Funcion que ayuda a cerrar definitivamente la sesion del usuario.
                
                :param token: Parametro que contiene el token de acceso al sistema del usuario.
                :param usuario: Parametro que contiene el nombre del usuario logueado al sistema.
                :param opcion: Parametro que indica la opcion con la que se desea trabajar.
            """
            condicion = ""
            if int(opcion) == 1:
                condicion = " num_token = '" + token + "'"
            else:
                condicion = " usuario = '" + usuario + "' and num_token != '" + token + "'"
            cursor = ConBD().cursorBDR()
            try:
                cursor.execute("""
                   update parametro.TP_TOKEN set estatus = 'I'
                   where """ + condicion + """
                """)
            finally:
                cursor.close()
            
        def validaSesionUsuario(self, token, opcion):
            """
                Funcion que ayuda a validar si la sesion del usuario aun se encuentra activa
                
                :param token: Parametro que contiene el token de acceso al sistema del usuario.
                :param opcion: Parametro que contiene la opcion con la que se desea trabajar.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                   select estatus from parametro.TP_TOKEN
                   where num_token = '""" + token + """'
                """)
                res = [app for app in data]
                resp = ""
                if int(opcion) == 1:
                    resp = ("NOK" if res[0][0] == 'I' else "OK" ) if len(res) >= 1 else "NOK" 
                else:
                    resp = res[0][0]
            except Exception:
                resp = "NOK"
            finally:
                cursor.close()
            return resp
        
        def insertaQuery(self, sql):
            """
                Funcion generica que ayuda a insertar en la base de datos de riesgos alguna sentencia SQL pasada a esta funcion.
                
                :param sql: String con la sentencia SQL que se desea insertar en base de datos.
            """
            cursor = ConBD().cursorBDR()
            try:
                cursor.execute(sql)
            finally:
                cursor.close()
            
        def validaEstatus(self, idEstatus):
            """
                Funcion que ayuda a obtener el nombre del identificador del estatus de la solicitud.
                
                :param idEstatus: Identificador del estatus de la solicitud.
                
                :return: Regresa el nombre del identificador del estatus de la solicitud.
            """
            nomEstatus={
                1:'Elaboraci&oacute;n',
                2:'Revisi&oacute;n',
                3:'Rev. de Riesgos',
                4:'Concluida',
                5:'Rev. de PF'
            }
            return nomEstatus.get(idEstatus,"NOK")
        
        
        
        def insertaQueryMasivo(self, query, obj):
            """
                Funcion que ayuda a insertar una sentencia sql de manera masiva.
                
                :param query: Parametro que contiene la sentencia sql a insertar de manera masiva.
                :param obj: Parametro que contiene los valores a insertar en la sentencia sql.
                
                :return: Regresa un booleano indicando si se inserto correctamente la sentencia sql.
            """
            resp = True
            try: 
                cursor = ConBD().cursorBDR()
                cursor.executemany(query,obj)
            except ValueError:
                resp = False
            finally:
                cursor.close()
            return resp
        
        def selectQuery(self, sql):
            """
                Funcion que ayuda a consultar una sentencia SQL en la base de datos de riesgos.
                
                :param sql: Parametro que contiene la sentencia SQL que se desea consultar en BD.
                
                :return: Regresa objeto con la informacion solicitada. 
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute(sql)
                res = [app for app in data]
            finally:
                cursor.close()
            return list(res)
        
        def buscaRolXNombre(self, nombreRol):
            """
                Funcion que busca roles por filtro de nombre de rol.
                
                :param nombreRol: Parametro que contiene un fragmento de palabra del nombre de rol a buscar.
                
                :return: Regresa objeto con los roles encontrados con el filtro propuesto.
            """
            cursor = ConBD().cursorBDR()
            try:
                data = cursor.execute("""
                            select id_perfil from catalogo.TC_PERFILES
                            where nombre_perfil like '%"""+nombreRol+"""%' and sistema = 'CPR'
                            and activo = '0' order by 1
                        """)
                resp = []
                for app in data:
                    resp.append(app[0])
            finally:
                cursor.close()
            return resp
        
        def insertaComentCLOB(self, sql, comment):
            """
                Funcion que ayuda insertar los comentarios de las solicitudes en la base de datos, los cuales son tratados como tipo
                de dato CLOB.
                
                :param sql: Sentencia SQL que se desea insertar en BD.
                :param comment: Parametro que contiene el comentario de la solicitud.
            """
            cursor = ConBD().cursorBDR()
            try:
                cursor.execute(sql, [comment])
            finally:
                cursor.close()